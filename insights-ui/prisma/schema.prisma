// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------------
// Existing Models
// --------------------------

model Ticker {
  tickerKey                    String                @id @unique @map("ticker_key")
  createdAt                    DateTime              @default(now()) @map("created_at")
  updatedAt                    DateTime              @updatedAt @map("updated_at")
  createdBy                    String?               @map("created_by")
  updatedBy                    String?               @map("updated_by")
  sectorId                     Int                   @map("sector_id")
  industryGroupId              Int                   @map("industry_group_id")
  evaluationsOfLatest10Q       CriterionEvaluation[]
  criteriaMatchesOfLatest10QId String?               @unique @map("criteria_matches_of_latest_10q_id")
  secFilings                   SecFiling[]

  ImportantMetrics               ImportantMetricsEvaluation[]
  MetricValueItem                MetricValueItem[]
  CriterionReportItem            CriterionReportItem[]
  PerformanceChecklistEvaluation PerformanceChecklistEvaluation[]
  PerformanceChecklistItem       PerformanceChecklistItem[]
  CriterionMatch                 CriterionMatch[]
  criteriaMatchesOfLatest10Q     CriteriaMatchesOfLatest10Q?

  @@map("tickers")
}

model SecFiling {
  id              String                @id @default(uuid())
  tickerKey       String                @map("ticker_key")
  filingDate      DateTime              @map("filing_date")
  form            String                @map("form")
  filingUrl       String                @map("filing_url")
  accessionNumber String                @unique @map("accession_number")
  periodOfReport  String                @map("period_of_report")
  attachments     SecFilingAttachment[]
  shortSummary    String?               @map("short_summary")

  // Relation to the Ticker model
  ticker Ticker @relation(fields: [tickerKey], references: [tickerKey])

  @@map("sec_filings")
}

// Model for Filing attachments using UUIDs.
model SecFilingAttachment {
  id             String    @id @default(uuid())
  sequenceNumber String    @map("sequence_number")
  description    String    @map("description")
  purpose        String?   @map("purpose")
  url            String    @map("url")
  documentType   String    @map("document_type")
  secFilingId    String    @map("sec_filing_id")
  secFiling      SecFiling @relation(fields: [secFilingId], references: [id])

  @@map("sec_filing_attachments")
}

enum FormSize {
  xs
  s
  m
  l
  xl
}

model SecForm {
  formName         String   @id @map("form_name")
  formDescription  String   @map("form_description")
  importantItems   Json     @map("important_items")
  averagePageCount Int      @map("average_page_count")
  size             FormSize @map("size")
}

// --------------------------
// New Ticker Report Models (All IDs as UUID)
// --------------------------

enum ProcessingStatus {
  Completed
  Failed
  InProgress
  NotStarted
}

model CriterionEvaluation {
  id                             String                          @id @default(uuid())
  tickerKey                      String                          @map("ticker_key")
  criterionKey                   String                          @map("criterion_key")
  importantMetricsEvaluation     ImportantMetricsEvaluation?
  performanceChecklistEvaluation PerformanceChecklistEvaluation?
  reports                        CriterionReportItem[]
  ticker                         Ticker                          @relation(fields: [tickerKey], references: [tickerKey])

  @@unique([tickerKey, criterionKey])
  @@map("criterion_evaluations")
}

model ImportantMetricsEvaluation {
  id           String           @id @default(uuid())
  status       ProcessingStatus
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  createdBy    String?          @map("created_by")
  updatedBy    String?          @map("updated_by")
  tickerKey    String           @map("ticker_key")
  criterionKey String           @map("criterion_key")

  // One-to-one relation with CriterionEvaluation
  criterionEvaluationId String?              @unique @map("criterion_evaluation_id")
  criterionEvaluation   CriterionEvaluation? @relation(fields: [criterionEvaluationId], references: [id])
  ticker                Ticker               @relation(fields: [tickerKey], references: [tickerKey])

  metrics MetricValueItem[]

  @@unique([tickerKey, criterionKey])
  @@map("important_metrics")
}

model MetricValueItem {
  id                     String                     @id @default(uuid())
  metricKey              String                     @map("metric_key")
  value                  String
  calculationExplanation String                     @map("calculation_explanation")
  tickerKey              String                     @map("ticker_key")
  criterionKey           String                     @map("criterion_key")
  importantMetricsId     String                     @map("important_metrics_id")
  importantMetrics       ImportantMetricsEvaluation @relation(fields: [importantMetricsId], references: [id])
  ticker                 Ticker                     @relation(fields: [tickerKey], references: [tickerKey])

  @@map("metric_value_items")
}

model CriterionReportItem {
  id                    String              @id @default(uuid())
  reportKey             String              @map("report_key")
  status                ProcessingStatus
  textData              String?             @map("data")
  jsonData              Json?               @map("json_data")
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @updatedAt @map("updated_at")
  createdBy             String?             @map("created_by")
  updatedBy             String?             @map("updated_by")
  tickerKey             String              @map("ticker_key")
  criterionKey          String              @map("criterion_key")
  criterionEvaluationId String              @map("criterion_evaluation_id")
  criterionEvaluation   CriterionEvaluation @relation(fields: [criterionEvaluationId], references: [id])
  ticker                Ticker              @relation(fields: [tickerKey], references: [tickerKey])

  @@unique([tickerKey, criterionKey, reportKey])
  @@map("criterion_report_items")
}

model PerformanceChecklistEvaluation {
  id     String           @id @default(uuid())
  status ProcessingStatus

  createdAt             DateTime             @default(now()) @map("created_at")
  updatedAt             DateTime             @updatedAt @map("updated_at")
  createdBy             String?              @map("created_by")
  updatedBy             String?              @map("updated_by")
  tickerKey             String               @map("ticker_key")
  criterionKey          String               @map("criterion_key")
  // One-to-one relation with CriterionEvaluation
  criterionEvaluationId String?              @unique @map("criterion_evaluation_id")
  criterionEvaluation   CriterionEvaluation? @relation(fields: [criterionEvaluationId], references: [id])
  ticker                Ticker               @relation(fields: [tickerKey], references: [tickerKey])

  performanceChecklistItems PerformanceChecklistItem[]

  @@unique([tickerKey, criterionKey])
  @@map("performance_checklist_evaluations")
}

model PerformanceChecklistItem {
  id                  String @id @default(uuid())
  checklistItem       String @map("checklist_item")
  oneLinerExplanation String @map("one_liner_explanation")
  informationUsed     String @map("information_used")
  detailedExplanation String @map("detailed_explanation")
  evaluationLogic     String @map("evaluation_logic")
  score               Float
  tickerKey           String @map("ticker_key")
  criterionKey        String @map("criterion_key")

  performanceChecklistEvaluationId String                         @map("performance_checklist_evaluation_id")
  performanceChecklistEvaluation   PerformanceChecklistEvaluation @relation(fields: [performanceChecklistEvaluationId], references: [id])
  ticker                           Ticker                         @relation(fields: [tickerKey], references: [tickerKey])

  @@map("performance_checklist_items")
}

model CriteriaMatchesOfLatest10Q {
  id            String           @id @default(uuid())
  status        ProcessingStatus
  failureReason String?          @map("failure_reason")
  tickerKey     String           @map("ticker_key")

  ticker           Ticker           @relation(fields: [tickerKey], references: [tickerKey])
  criterionMatches CriterionMatch[]

  @@unique([tickerKey])
  @@map("criter_matches_latest_10q")
}

model CriterionMatch {
  id             String @id @default(uuid())
  criterionKey   String @map("criterion_key")
  matchedContent String @map("matched_content")
  tickerKey      String @map("ticker_key")

  criterionMatchesOfLatest10QId String                     @map("criterion_matches_latest_10q_id")
  criterionMatchesOfLatest10Q   CriteriaMatchesOfLatest10Q @relation(fields: [criterionMatchesOfLatest10QId], references: [id])
  ticker                        Ticker                     @relation(fields: [tickerKey], references: [tickerKey])
  matchedAttachments            CriterionMatchAttachment[]

  @@unique([tickerKey, criterionKey])
  @@map("criterion_matches")
}

model CriterionMatchAttachment {
  id               String         @id @default(uuid())
  sequenceNumber   String         @map("sequence_number")
  description      String         @map("description")
  purpose          String?        @map("purpose")
  url              String         @map("url")
  documentName     String         @map("document_name")
  relevance        Float          @map("relevance")
  criterionMatchId String         @map("criterion_match_id")
  tickerKey        String         @map("ticker_key")
  criterionKey     String         @map("criterion_key")
  criterionMatch   CriterionMatch @relation(fields: [criterionMatchId], references: [id])

  @@map("criterion_match_attachments")
}
