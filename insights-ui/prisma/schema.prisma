// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model for the Ticker table (provided)
model Ticker {
  tickerKey       String   @id @unique @map("ticker_key")
  reportUrl       String?  @map("report_url")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdBy       String?  @map("created_by")
  updatedBy       String?  @map("updated_by")
  sectorId        Int      @map("sector_id")
  industryGroupId Int      @map("industry_group_id")

  // Relation: one ticker can have many SEC filings.
  secFilings   SecFiling[]
  TickerReport TickerReport[]

  @@map("tickers")
}

// Model for SEC filings using UUIDs and linking to a ticker via tickerKey.
model SecFiling {
  id              String                @id @default(uuid())
  tickerKey       String                @map("ticker_key")
  filingDate      DateTime              @map("filing_date")
  form            String                @map("form")
  filingUrl       String                @map("filing_url")
  accessionNumber String                @unique @map("accession_number")
  periodOfReport  String                @map("period_of_report")
  attachments     SecFilingAttachment[]

  // Relation to the Ticker model
  ticker Ticker @relation(fields: [tickerKey], references: [tickerKey])

  @@map("sec_filings")
}

// Model for Filing attachments using UUIDs.
model SecFilingAttachment {
  id             String    @id @default(uuid())
  sequenceNumber String    @map("sequence_number")
  description    String    @map("description")
  purpose        String?   @map("purpose")
  url            String    @map("url")
  documentType   String    @map("document_type")
  secFilingId    String    @map("sec_filing_id")
  secFiling      SecFiling @relation(fields: [secFilingId], references: [id])

  @@map("sec_filing_attachments")
}

enum ProcessingStatus {
  Completed
  Failed
  InProgress
  NotStarted
}

model TickerReport {
  id                      Int      @id @default(autoincrement())
  tickerKey               String   @map("ticker_key")
  selectedIndustryGroupId Int      @map("selected_industry_group_id")
  selectedSectorId        Int      @map("selected_sector_id")
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")
  createdBy               String?  @map("created_by")
  updatedBy               String?  @map("updated_by")

  evaluations                CriterionEvaluation[]
  criteriaMatchesOfLatest10Q CriterionMatchesOfLatest10Q?

  // Relation to Ticker (using the same ticker_key)
  ticker Ticker @relation(fields: [tickerKey], references: [tickerKey])

  @@map("ticker_reports")
}

model CriterionEvaluation {
  id             Int    @id @default(autoincrement())
  criterionKey   String @map("criterion_key")
  tickerReportId Int    @map("ticker_report_id")

  importantMetrics               ImportantMetrics?
  performanceChecklistEvaluation PerformanceChecklistEvaluation?
  reports                        CriterionReportItem[]

  tickerReport TickerReport @relation(fields: [tickerReportId], references: [id])

  @@map("criterion_evaluations")
}

model ImportantMetrics {
  id        Int              @id @default(autoincrement())
  status    ProcessingStatus
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  createdBy String?          @map("created_by")
  updatedBy String?          @map("updated_by")

  // One-to-one relation with CriterionEvaluation
  criterionEvaluationId Int?                 @unique @map("criterion_evaluation_id")
  criterionEvaluation   CriterionEvaluation? @relation(fields: [criterionEvaluationId], references: [id])

  metrics MetricValueItem[]

  @@map("important_metrics")
}

model MetricValueItem {
  id                     Int    @id @default(autoincrement())
  metricKey              String @map("metric_key")
  value                  String
  calculationExplanation String @map("calculation_explanation")

  importantMetricsId Int              @map("important_metrics_id")
  importantMetrics   ImportantMetrics @relation(fields: [importantMetricsId], references: [id])

  @@map("metric_value_items")
}

model CriterionReportItem {
  id            Int              @id @default(autoincrement())
  reportKey     String           @map("report_key")
  status        ProcessingStatus
  outputFileUrl String?          @map("output_file_url")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy String?  @map("created_by")
  updatedBy String?  @map("updated_by")

  criterionEvaluationId Int                 @map("criterion_evaluation_id")
  criterionEvaluation   CriterionEvaluation @relation(fields: [criterionEvaluationId], references: [id])

  @@map("criterion_report_items")
}

model PerformanceChecklistEvaluation {
  id     Int              @id @default(autoincrement())
  status ProcessingStatus

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy String?  @map("created_by")
  updatedBy String?  @map("updated_by")

  // One-to-one relation with CriterionEvaluation
  criterionEvaluationId Int?                 @unique @map("criterion_evaluation_id")
  criterionEvaluation   CriterionEvaluation? @relation(fields: [criterionEvaluationId], references: [id])

  performanceChecklistItems PerformanceChecklistItem[]

  @@map("performance_checklist_evaluations")
}

model PerformanceChecklistItem {
  id                  Int    @id @default(autoincrement())
  checklistItem       String @map("checklist_item")
  oneLinerExplanation String @map("one_liner_explanation")
  informationUsed     String @map("information_used")
  detailedExplanation String @map("detailed_explanation")
  evaluationLogic     String @map("evaluation_logic")
  score               Float

  performanceChecklistEvaluationId Int                            @map("performance_checklist_evaluation_id")
  performanceChecklistEvaluation   PerformanceChecklistEvaluation @relation(fields: [performanceChecklistEvaluationId], references: [id])

  @@map("performance_checklist_items")
}

model CriterionMatchesOfLatest10Q {
  id            Int              @id @default(autoincrement())
  status        ProcessingStatus
  failureReason String?          @map("failure_reason")

  tickerReportId Int          @unique @map("ticker_report_id")
  tickerReport   TickerReport @relation(fields: [tickerReportId], references: [id])

  criterionMatches CriterionMatch[]

  @@map("criterion_matches_latest_10q")
}

model CriterionMatch {
  id             Int    @id @default(autoincrement())
  criterionKey   String @map("criterion_key")
  matchedContent String @map("matched_content")

  criterionMatchesOfLatest10QId Int                         @map("criterion_matches_latest_10q_id")
  criterionMatchesOfLatest10Q   CriterionMatchesOfLatest10Q @relation(fields: [criterionMatchesOfLatest10QId], references: [id])

  matchedAttachments CriterionMatchAttachment[]

  @@map("criterion_matches")
}

model CriterionMatchAttachment {
  id               String         @id @default(uuid())
  sequenceNumber   String         @map("sequence_number")
  description      String         @map("description")
  purpose          String?        @map("purpose")
  url              String         @map("url")
  documentType     String         @map("document_type")
  criterionMatchId Int            @map("criterion_match_id")
  criterionMatch   CriterionMatch @relation(fields: [criterionMatchId], references: [id])

  @@map("criterion_match_attachments")
}
