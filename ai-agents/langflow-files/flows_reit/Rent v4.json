{
  "icon_bg_color": null,
  "user_id": "0be3e4c3-3b27-440f-81e4-921ccf9df0b3",
  "gradient": null,
  "icon": null,
  "is_component": false,
  "tags": null,
  "updated_at": "2025-08-06T14:15:47+00:00",
  "locked": false,
  "webhook": true,
  "folder_id": "00af9b7e-c33a-4fbf-8396-9739dbc109f2",
  "endpoint_name": null,
  "description": "Create, Curate, Communicate with Langflow.",
  "id": "93b04114-d417-4145-81c0-5ff6b8e34e00",
  "name": "Rent v4",
  "data": {
    "nodes": [
      {
        "id": "Prompt-nvcHK",
        "type": "genericNode",
        "position": {
          "x": 2250.6787775536213,
          "y": 2971.575139275307
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "## All Financial Statements:\n\n{All_Financial_Data}\n\n--------------------------------------------------------------\n\n## Related Information from SEC 10Q Filing:\n\n{Criterion}\n\n",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "tool_placeholder": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tool_placeholder",
                "value": "",
                "display_name": "Tool Placeholder",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "Criterion": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "Criterion",
                "display_name": "Criterion",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "All_Financial_Data": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "All_Financial_Data",
                "display_name": "All_Financial_Data",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "minimized": false,
            "custom_fields": {
              "template": [
                "All_Financial_Data",
                "Criterion"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "beta": false,
            "legacy": false,
            "error": null,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "Prompt",
          "id": "Prompt-nvcHK"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 420
        }
      },
      {
        "id": "Prompt-xn1W9",
        "type": "genericNode",
        "position": {
          "x": 5292.865532549762,
          "y": 1449.8349670308025
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "# Diversification Score\n\nBelow is the diversification score and the facts on how diversification score was calculated:\n\n{diversificationScore}\n\n# Lease Expiration Score\n\nBelow is the lease expirations score and facts on how the lease  expiration score was calculated:\n\n{leaseExpirations}\n\n# Tenant Quality Score\n\nBelow is the tenant quality score and facts on how the score was calculated:\n\n{tenant_quality_score}\n\n# Occupancy Rate\nHere you will find the occupancy rate\n{occupancy_rate}\n\n# Other Supporting Data\n\nBelow is the **financial data** and relevant extracted information from SEC 10Q :\n\n{data}\n",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "tool_placeholder": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tool_placeholder",
                "value": "",
                "display_name": "Tool Placeholder",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "data": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "data",
                "display_name": "data",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "diversificationScore": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "diversificationScore",
                "display_name": "diversificationScore",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "leaseExpirations": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "leaseExpirations",
                "display_name": "leaseExpirations",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "tenant_quality_score": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "tenant_quality_score",
                "display_name": "tenant_quality_score",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "occupancy_rate": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "occupancy_rate",
                "display_name": "occupancy_rate",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "minimized": false,
            "custom_fields": {
              "template": [
                "diversificationScore",
                "leaseExpirations",
                "tenant_quality_score",
                "occupancy_rate",
                "data"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "beta": false,
            "legacy": false,
            "error": null,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "Prompt",
          "id": "Prompt-xn1W9"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 667
        }
      },
      {
        "id": "SimpleAPIRequest-avmVS",
        "type": "genericNode",
        "position": {
          "x": 6137.264122786104,
          "y": 1477.6216188060362
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "body_data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body_data",
                "value": "",
                "display_name": "Body (JSON Data)",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Parsed JSON from the JSONPayloadComponent (or any Data).",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nimport asyncio\r\nfrom typing import Any, Dict\r\n\r\nimport httpx\r\n\r\nfrom langflow.custom import Component\r\nfrom langflow.io import (\r\n    StrInput,\r\n    DropdownInput,\r\n    DataInput,\r\n    Output,\r\n)\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass SimpleAPIRequestComponent(Component):\r\n    display_name = \"Simple API Request\"\r\n    description = \"Makes an HTTP request with JSON-based body input.\"\r\n    icon = \"Globe\"\r\n    name = \"SimpleAPIRequest\"\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"url\",\r\n            display_name=\"URL\",\r\n            info=\"Enter the HTTP endpoint to call (e.g., https://api.example.com).\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"method\",\r\n            display_name=\"Method\",\r\n            options=[\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"],\r\n            info=\"Select the HTTP method to use.\",\r\n        ),\r\n        DataInput(\r\n            name=\"body_data\",\r\n            display_name=\"Body (JSON Data)\",\r\n            info=\"Parsed JSON from the JSONPayloadComponent (or any Data).\",\r\n            advanced=False,\r\n        ),\r\n        TableInput(\r\n            name=\"headers_data\",\r\n            display_name=\"Headers\",\r\n            info=\"The headers to send with the request as a dictionary.\",\r\n            table_schema=[\r\n                {\r\n                    \"name\": \"key\",\r\n                    \"display_name\": \"Header\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header name\",\r\n                },\r\n                {\r\n                    \"name\": \"value\",\r\n                    \"display_name\": \"Value\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header value\",\r\n                },\r\n            ],\r\n            value=[],\r\n            advanced=True,\r\n            input_types=[\"Data\"],\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Response\", name=\"response\", method=\"make_request\"),\r\n    ]\r\n\r\n    async def make_request(self) -> Data:\r\n        \"\"\"Executes an HTTP request using the provided URL, method, body_data, and headers_data.\"\"\"\r\n        url = self.url\r\n        method = self.method.upper()\r\n\r\n        # Extract the actual data from the Data objects\r\n        # If \"body_data\" was from JSONPayloadComponent, it might be a dict or a string.\r\n        # We'll assume dictionary is intended for JSON body. If it's something else, handle gracefully.\r\n        body_content = self.body_data.data if self.body_data else None\r\n        if not isinstance(body_content, (dict, list)) and body_content is not None:\r\n            # If it's a plain string or something else, wrap it or parse it as needed\r\n            # For a real app, you could refine this logic. For now, we'll just send it as-is.\r\n            body_content = {\"data\": body_content}\r\n\r\n        # Same for headers\r\n        headers = {}\r\n        if self.headers_data and isinstance(self.headers_data.data, dict):\r\n            # Convert all header values to strings just to be safe\r\n            headers = {str(k): str(v) for k, v in self.headers_data.data.items()}\r\n\r\n        try:\r\n            async with httpx.AsyncClient() as client:\r\n                if method in {\"GET\", \"DELETE\"}:\r\n                    # GET/DELETE usually send no JSON body\r\n                    response = await client.request(method, url, headers=headers)\r\n                else:\r\n                    response = await client.request(method, url, headers=headers, json=body_content)\r\n\r\n                # Attempt to parse the response as JSON\r\n                try:\r\n                    resp_data = response.json()\r\n                except json.JSONDecodeError:\r\n                    # If not valid JSON, just return the raw text\r\n                    resp_data = {\"raw_text\": response.text}\r\n\r\n                return Data(\r\n                    data={\r\n                        \"status_code\": response.status_code,\r\n                        \"response\": resp_data,\r\n                    }\r\n                )\r\n\r\n        except Exception as exc:\r\n            # If there's a network error, timeouts, etc., return an error structure\r\n            return Data(\r\n                    data={\r\n                        \"status_code\": 500,\r\n                        \"response\": str(exc),\r\n                    }\r\n                )\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "headers_data": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "key",
                      "display_name": "Header",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header name",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    },
                    {
                      "name": "value",
                      "display_name": "Value",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header value",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    }
                  ]
                },
                "trigger_text": "Open table",
                "trigger_icon": "Table",
                "table_icon": "Table",
                "trace_as_metadata": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "headers_data",
                "value": [],
                "display_name": "Headers",
                "advanced": true,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The headers to send with the request as a dictionary.",
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              },
              "method": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "GET",
                  "POST",
                  "PATCH",
                  "PUT",
                  "DELETE"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "method",
                "value": "POST",
                "display_name": "Method",
                "advanced": false,
                "dynamic": false,
                "info": "Select the HTTP method to use.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "url": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "url",
                "value": "SAVE_METRICS",
                "display_name": "URL",
                "advanced": false,
                "dynamic": false,
                "info": "Enter the HTTP endpoint to call (e.g., https://api.example.com).",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Makes an HTTP request with JSON-based body input.",
            "icon": "Globe",
            "base_classes": [
              "Data"
            ],
            "display_name": "Simple API Request",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "response",
                "hidden": null,
                "display_name": "Response",
                "method": "make_request",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "url",
              "method",
              "body_data",
              "headers_data"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "SimpleAPIRequest",
          "id": "SimpleAPIRequest-avmVS"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 376
        }
      },
      {
        "id": "Prompt-d5caQ",
        "type": "genericNode",
        "position": {
          "x": 5116.218946069233,
          "y": 307.0897210843175
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "# Metric Values\n\nHere are the calculated values of the metrics:\n\n{metricsValues}\n\n\n# Other Supporting Data\n\nHere is the financial information and the raw information from SEC 10Q:\n\n{financialAndAttachments}\n\n\n\n",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "tool_placeholder": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tool_placeholder",
                "value": "",
                "display_name": "Tool Placeholder",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "metricsValues": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "metricsValues",
                "display_name": "metricsValues",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "financialAndAttachments": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "financialAndAttachments",
                "display_name": "financialAndAttachments",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "minimized": false,
            "custom_fields": {
              "template": [
                "metricsValues",
                "financialAndAttachments"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "beta": false,
            "legacy": false,
            "error": null,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "Prompt",
          "id": "Prompt-d5caQ"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 420
        }
      },
      {
        "id": "SimpleAPIRequest-Ib5fm",
        "type": "genericNode",
        "position": {
          "x": 5926.209157674639,
          "y": 339.56614477018525
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "body_data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body_data",
                "value": "",
                "display_name": "Body (JSON Data)",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Parsed JSON from the JSONPayloadComponent (or any Data).",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nimport asyncio\r\nfrom typing import Any, Dict\r\n\r\nimport httpx\r\n\r\nfrom langflow.custom import Component\r\nfrom langflow.io import (\r\n    StrInput,\r\n    DropdownInput,\r\n    DataInput,\r\n    Output,\r\n)\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass SimpleAPIRequestComponent(Component):\r\n    display_name = \"Simple API Request\"\r\n    description = \"Makes an HTTP request with JSON-based body input.\"\r\n    icon = \"Globe\"\r\n    name = \"SimpleAPIRequest\"\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"url\",\r\n            display_name=\"URL\",\r\n            info=\"Enter the HTTP endpoint to call (e.g., https://api.example.com).\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"method\",\r\n            display_name=\"Method\",\r\n            options=[\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"],\r\n            info=\"Select the HTTP method to use.\",\r\n        ),\r\n        DataInput(\r\n            name=\"body_data\",\r\n            display_name=\"Body (JSON Data)\",\r\n            info=\"Parsed JSON from the JSONPayloadComponent (or any Data).\",\r\n            advanced=False,\r\n        ),\r\n        TableInput(\r\n            name=\"headers_data\",\r\n            display_name=\"Headers\",\r\n            info=\"The headers to send with the request as a dictionary.\",\r\n            table_schema=[\r\n                {\r\n                    \"name\": \"key\",\r\n                    \"display_name\": \"Header\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header name\",\r\n                },\r\n                {\r\n                    \"name\": \"value\",\r\n                    \"display_name\": \"Value\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header value\",\r\n                },\r\n            ],\r\n            value=[],\r\n            advanced=True,\r\n            input_types=[\"Data\"],\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Response\", name=\"response\", method=\"make_request\"),\r\n    ]\r\n\r\n    async def make_request(self) -> Data:\r\n        \"\"\"Executes an HTTP request using the provided URL, method, body_data, and headers_data.\"\"\"\r\n        url = self.url\r\n        method = self.method.upper()\r\n\r\n        # Extract the actual data from the Data objects\r\n        # If \"body_data\" was from JSONPayloadComponent, it might be a dict or a string.\r\n        # We'll assume dictionary is intended for JSON body. If it's something else, handle gracefully.\r\n        body_content = self.body_data.data if self.body_data else None\r\n        if not isinstance(body_content, (dict, list)) and body_content is not None:\r\n            # If it's a plain string or something else, wrap it or parse it as needed\r\n            # For a real app, you could refine this logic. For now, we'll just send it as-is.\r\n            body_content = {\"data\": body_content}\r\n\r\n        # Same for headers\r\n        headers = {}\r\n        if self.headers_data and isinstance(self.headers_data.data, dict):\r\n            # Convert all header values to strings just to be safe\r\n            headers = {str(k): str(v) for k, v in self.headers_data.data.items()}\r\n\r\n        try:\r\n            async with httpx.AsyncClient() as client:\r\n                if method in {\"GET\", \"DELETE\"}:\r\n                    # GET/DELETE usually send no JSON body\r\n                    response = await client.request(method, url, headers=headers)\r\n                else:\r\n                    response = await client.request(method, url, headers=headers, json=body_content)\r\n\r\n                # Attempt to parse the response as JSON\r\n                try:\r\n                    resp_data = response.json()\r\n                except json.JSONDecodeError:\r\n                    # If not valid JSON, just return the raw text\r\n                    resp_data = {\"raw_text\": response.text}\r\n\r\n                return Data(\r\n                    data={\r\n                        \"status_code\": response.status_code,\r\n                        \"response\": resp_data,\r\n                    }\r\n                )\r\n\r\n        except Exception as exc:\r\n            # If there's a network error, timeouts, etc., return an error structure\r\n            return Data(\r\n                    data={\r\n                        \"status_code\": 500,\r\n                        \"response\": str(exc),\r\n                    }\r\n                )\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "headers_data": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "key",
                      "display_name": "Header",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header name",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    },
                    {
                      "name": "value",
                      "display_name": "Value",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header value",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    }
                  ]
                },
                "trigger_text": "Open table",
                "trigger_icon": "Table",
                "table_icon": "Table",
                "trace_as_metadata": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "headers_data",
                "value": [],
                "display_name": "Headers",
                "advanced": true,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The headers to send with the request as a dictionary.",
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              },
              "method": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "GET",
                  "POST",
                  "PATCH",
                  "PUT",
                  "DELETE"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "method",
                "value": "POST",
                "display_name": "Method",
                "advanced": false,
                "dynamic": false,
                "info": "Select the HTTP method to use.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "url": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "url",
                "value": "SAVE_PERFORMANCE_CHECKLIST",
                "display_name": "URL",
                "advanced": false,
                "dynamic": false,
                "info": "Enter the HTTP endpoint to call (e.g., https://api.example.com).",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Makes an HTTP request with JSON-based body input.",
            "icon": "Globe",
            "base_classes": [
              "Data"
            ],
            "display_name": "Simple API Request",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "response",
                "hidden": null,
                "display_name": "Response",
                "method": "make_request",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "url",
              "method",
              "body_data",
              "headers_data"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "SimpleAPIRequest",
          "id": "SimpleAPIRequest-Ib5fm"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 376
        }
      },
      {
        "id": "Sec10QDataExtractor-TWjZJ",
        "type": "genericNode",
        "position": {
          "x": 1804.9497190860257,
          "y": 2476.923374318428
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.inputs import DropdownInput\nfrom langflow.template import Output\nfrom langflow.schema.message import Message\nfrom langflow.io import MessageTextInput, Output\n\nimport requests\nimport json\n\n\"\"\"\nThis module defines a single custom component (`SecEdgarMergedComponent`) that merges\nthree different \"tools\" or functionalities for retrieving SEC 10-Q filings data:\n\n1) **All Financials (mode='all_financials')**  \n   - Retrieves the full 10-Q XBRL-based financial statements for a given ticker.\n\n2) **Specific 10-Q Report (mode='specific_report')**  \n   - Retrieves a specific part of the 10-Q for a given ticker.  \n   - e.g. 'balance_sheet', 'income_statement', etc.\n\n3) **Criteria-Related Info (mode='criteria_related_info')**  \n   - Retrieves data related to a given \"criterion\" (e.g., 'debt', 'rent') in the 10-Q.\n\n-------------------------------------------------------------------------------\nExample System Prompt (to guide the LLM on how to choose the 'mode' & inputs):\n\n\"You have a single custom SEC 10-Q data extractor tool that has 3 possible modes:\n1) 'all_financials' for full 10-Q financial data,\n2) 'specific_report' for a specific 10-Q section (balance_sheet, income_statement, etc.),\n3) 'criteria_related_info' for retrieving specific criteria.\n\nWhen a user asks for the full 10-Q financial statements, set mode='all_financials'.\nWhen a user asks for a specific statement, set mode='specific_report' and fill 'report_type'.\nWhen a user asks for a custom criterion, set mode='criteria_related_info' and fill 'criterion_key'.\nAlways set 'ticker' according to the user's request.\"\n\n-------------------------------------------------------------------------------\nExample User Prompts that will route to the correct mode:\n\n1) \"Give me the info of debt criteria of AMT in sec filing.\"\n   \"Find me info on lease obligations for AMT's latest 10-Q.\"\n   -> mode='criteria_related_info', ticker='AMT', criterion_key='debt'\n\n2) \"Give me all financial details of AMT stock in sec filing.\"\n   \"Please fetch all 10-Q financial data for AMT.\"\n   -> mode='all_financials', ticker='AMT'\n\n3) \"Give me balance sheet of AMT stock in sec filing.\"\n   \"Show me the balance sheet of AMT's latest 10-Q.\"\n   -> mode='specific_report', ticker='AMT', report_type='balance_sheet'\n\n-------------------------------------------------------------------------------\n\"\"\"\n\nclass SecEdgarMergedComponent(Component):\n    display_name = \"SEC 10-Q Data\"\n    description = \"A custom component for retrieving financial statements, specific reports, or criteria information from SEC 10-Q filings.\"\n    documentation = \"https://docs.langflow.org/components-custom-components\"\n    icon = \"custom_components\"\n    name = \"Sec10QDataExtractor\"\n\n    FINANCIALS_ENDPOINT = \"https://4mbhgkl77s4gubn7i2rdcllbru0wzyxl.lambda-url.us-east-1.on.aws/financials\"\n    SEARCH_ENDPOINT = \"https://4mbhgkl77s4gubn7i2rdcllbru0wzyxl.lambda-url.us-east-1.on.aws/search\"\n    CRITERIA_ENDPOINT = \"https://4mbhgkl77s4gubn7i2rdcllbru0wzyxl.lambda-url.us-east-1.on.aws/get-matching-criteria-attachments\"\n    \n    inputs = [\n        MessageTextInput(\n            name=\"ticker\",\n            display_name=\"Ticker\",\n            value=\"AAPL\",\n            info=\"The stock ticker symbol (e.g. AAPL).\",\n            tool_mode=True,\n        ),\n        DropdownInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"all_financials\", \"specific_report\", \"criteria_related_info\"],\n            info=(\n                \"Select 'all_financials' to retrieve the full 10Q XBRL-based data.\\n\"\n                \"Select 'specific_report' to retrieve a specific part of the 10Q.\\n\"\n                \"Select 'criteria_related_info' to retrieve specific criterion data from the 10Q.\"\n            ),\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"report_type\",\n            display_name=\"Report Type (Used if mode='specific_report')\",\n            value=\"\",\n            info=\"E.g.: 'balance_sheet', 'income_statement', 'operation_statement', or 'cash_flow'.\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"criterion_key\",\n            display_name=\"Criterion Key (Used if mode='criteria_related_info')\",\n            value=\"\",\n            info=\"Provide the criterion key to retrieve e.g. 'debt', 'rent', etc.\",\n            tool_mode=True,\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Merged SEC Output\",\n            name=\"merged_sec_output\",\n            method=\"call_merged_tool\",\n        )\n    ]\n\n    def call_merged_tool(self) -> Message:\n        \"\"\"\n        Decide which underlying call to run based on 'mode'.\n        For PART 1, we'll return placeholder text.\n        Replace this with real Lambda calls in PART 2.\n        \"\"\"\n\n        ticker = self.ticker\n        mode = self.mode\n        report_type = self.report_type\n        criterion_key = self.criterion_key\n\n        if mode == \"all_financials\":\n            return self._call_all_financials(ticker)\n\n        elif mode == \"specific_report\":\n            return self._call_specific_report(ticker, report_type)\n        \n        elif mode == \"criteria_related_info\":\n            return self._call_criteria_info(ticker, criterion_key)\n\n        else:\n            return Message(\n                text=(\n                    f\"You selected mode '{mode}', which isn't implemented yet.\\n\"\n                    \"In the future, we can add new routes or logic here.\"\n                )\n            )\n\n    def _call_all_financials(self, ticker: str) -> Message:\n        try:\n            payload = {\"ticker\": ticker}\n            response = requests.post(self.FINANCIALS_ENDPOINT, json=payload)\n            response_data = response.json()  \n\n            if \"message\" in response_data:\n                return Message(text=response_data[\"message\"])\n            elif \"data\" in response_data:\n                return Message(text=response_data[\"data\"])\n            else:\n                return Message(text=json.dumps(response_data, indent=2))\n\n        except Exception as e:\n            error_text = f\"Error calling SEC Edgar Lambda (/financials): {e}\"\n            return Message(text=error_text)\n\n    def _call_specific_report(self, ticker: str, report_type: str) -> Message:\n        try:\n            payload = {\"ticker\": ticker, \"report_type\": report_type}\n            response = requests.post(self.SEARCH_ENDPOINT, json=payload)\n            data = response.json()  \n\n            message_text = data.get(\"data\", \"\")\n            return Message(text=message_text)\n\n        except Exception as e:\n            error_text = f\"Error calling SEC Edgar Lambda (/search): {e}\"\n            return Message(text=error_text)\n\n    def _call_criteria_info(self, ticker: str, criterion_key: str) -> Message:\n        try:\n            payload = {\"ticker\": ticker, \"criterion_key\": criterion_key}\n            response = requests.post(self.CRITERIA_ENDPOINT, json=payload)\n            response_data = response.json()  \n\n            if \"message\" in response_data:\n                return Message(text=response_data[\"message\"])\n            elif \"data\" in response_data:\n                return Message(text=response_data[\"data\"])\n            else:\n                return Message(text=json.dumps(response_data, indent=2))\n\n        except Exception as e:\n            error_text = f\"Error calling SEC Edgar Lambda (/get-matching-criteria-attachments): {e}\"\n            return Message(text=error_text)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "criterion_key": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "criterion_key",
                "value": "",
                "display_name": "Criterion Key (Used if mode='criteria_related_info')",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Provide the criterion key to retrieve e.g. 'debt', 'rent', etc.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "mode": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "options": [
                  "all_financials",
                  "specific_report",
                  "criteria_related_info"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "mode",
                "value": "all_financials",
                "display_name": "Mode",
                "advanced": false,
                "dynamic": false,
                "info": "Select 'all_financials' to retrieve the full 10Q XBRL-based data.\nSelect 'specific_report' to retrieve a specific part of the 10Q.\nSelect 'criteria_related_info' to retrieve specific criterion data from the 10Q.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "report_type": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "report_type",
                "value": "",
                "display_name": "Report Type (Used if mode='specific_report')",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "E.g.: 'balance_sheet', 'income_statement', 'operation_statement', or 'cash_flow'.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "ticker": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ticker",
                "value": "",
                "display_name": "Ticker",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The stock ticker symbol (e.g. AAPL).",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component for retrieving financial statements, specific reports, or criteria information from SEC 10-Q filings.",
            "icon": "custom_components",
            "base_classes": [
              "Message"
            ],
            "display_name": "SEC 10-Q Data",
            "documentation": "https://docs.langflow.org/components-custom-components",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "merged_sec_output",
                "hidden": null,
                "display_name": "Merged SEC Output",
                "method": "call_merged_tool",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "ticker",
              "mode",
              "report_type",
              "criterion_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "Sec10QDataExtractor",
          "id": "Sec10QDataExtractor-TWjZJ"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 517
        }
      },
      {
        "id": "Sec10QDataExtractor-BHvBs",
        "type": "genericNode",
        "position": {
          "x": 1826.4990547621019,
          "y": 3284.5456226782344
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.inputs import DropdownInput\nfrom langflow.template import Output\nfrom langflow.schema.message import Message\nfrom langflow.io import MessageTextInput, Output\n\nimport requests\nimport json\n\n\"\"\"\nThis module defines a single custom component (`SecEdgarMergedComponent`) that merges\nthree different \"tools\" or functionalities for retrieving SEC 10-Q filings data:\n\n1) **All Financials (mode='all_financials')**  \n   - Retrieves the full 10-Q XBRL-based financial statements for a given ticker.\n\n2) **Specific 10-Q Report (mode='specific_report')**  \n   - Retrieves a specific part of the 10-Q for a given ticker.  \n   - e.g. 'balance_sheet', 'income_statement', etc.\n\n3) **Criteria-Related Info (mode='criteria_related_info')**  \n   - Retrieves data related to a given \"criterion\" (e.g., 'debt', 'rent') in the 10-Q.\n\n-------------------------------------------------------------------------------\nExample System Prompt (to guide the LLM on how to choose the 'mode' & inputs):\n\n\"You have a single custom SEC 10-Q data extractor tool that has 3 possible modes:\n1) 'all_financials' for full 10-Q financial data,\n2) 'specific_report' for a specific 10-Q section (balance_sheet, income_statement, etc.),\n3) 'criteria_related_info' for retrieving specific criteria.\n\nWhen a user asks for the full 10-Q financial statements, set mode='all_financials'.\nWhen a user asks for a specific statement, set mode='specific_report' and fill 'report_type'.\nWhen a user asks for a custom criterion, set mode='criteria_related_info' and fill 'criterion_key'.\nAlways set 'ticker' according to the user's request.\"\n\n-------------------------------------------------------------------------------\nExample User Prompts that will route to the correct mode:\n\n1) \"Give me the info of debt criteria of AMT in sec filing.\"\n   \"Find me info on lease obligations for AMT's latest 10-Q.\"\n   -> mode='criteria_related_info', ticker='AMT', criterion_key='debt'\n\n2) \"Give me all financial details of AMT stock in sec filing.\"\n   \"Please fetch all 10-Q financial data for AMT.\"\n   -> mode='all_financials', ticker='AMT'\n\n3) \"Give me balance sheet of AMT stock in sec filing.\"\n   \"Show me the balance sheet of AMT's latest 10-Q.\"\n   -> mode='specific_report', ticker='AMT', report_type='balance_sheet'\n\n-------------------------------------------------------------------------------\n\"\"\"\n\nclass SecEdgarMergedComponent(Component):\n    display_name = \"SEC 10-Q Data\"\n    description = \"A custom component for retrieving financial statements, specific reports, or criteria information from SEC 10-Q filings.\"\n    documentation = \"https://docs.langflow.org/components-custom-components\"\n    icon = \"custom_components\"\n    name = \"Sec10QDataExtractor\"\n\n    FINANCIALS_ENDPOINT = \"https://4mbhgkl77s4gubn7i2rdcllbru0wzyxl.lambda-url.us-east-1.on.aws/financials\"\n    SEARCH_ENDPOINT = \"https://4mbhgkl77s4gubn7i2rdcllbru0wzyxl.lambda-url.us-east-1.on.aws/search\"\n    CRITERIA_ENDPOINT = \"https://4mbhgkl77s4gubn7i2rdcllbru0wzyxl.lambda-url.us-east-1.on.aws/get-matching-criteria-attachments\"\n    \n    inputs = [\n        MessageTextInput(\n            name=\"ticker\",\n            display_name=\"Ticker\",\n            value=\"AAPL\",\n            info=\"The stock ticker symbol (e.g. AAPL).\",\n            tool_mode=True,\n        ),\n        DropdownInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"all_financials\", \"specific_report\", \"criteria_related_info\"],\n            info=(\n                \"Select 'all_financials' to retrieve the full 10Q XBRL-based data.\\n\"\n                \"Select 'specific_report' to retrieve a specific part of the 10Q.\\n\"\n                \"Select 'criteria_related_info' to retrieve specific criterion data from the 10Q.\"\n            ),\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"report_type\",\n            display_name=\"Report Type (Used if mode='specific_report')\",\n            value=\"\",\n            info=\"E.g.: 'balance_sheet', 'income_statement', 'operation_statement', or 'cash_flow'.\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"criterion_key\",\n            display_name=\"Criterion Key (Used if mode='criteria_related_info')\",\n            value=\"\",\n            info=\"Provide the criterion key to retrieve e.g. 'debt', 'rent', etc.\",\n            tool_mode=True,\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Merged SEC Output\",\n            name=\"merged_sec_output\",\n            method=\"call_merged_tool\",\n        )\n    ]\n\n    def call_merged_tool(self) -> Message:\n        \"\"\"\n        Decide which underlying call to run based on 'mode'.\n        For PART 1, we'll return placeholder text.\n        Replace this with real Lambda calls in PART 2.\n        \"\"\"\n\n        ticker = self.ticker\n        mode = self.mode\n        report_type = self.report_type\n        criterion_key = self.criterion_key\n\n        if mode == \"all_financials\":\n            return self._call_all_financials(ticker)\n\n        elif mode == \"specific_report\":\n            return self._call_specific_report(ticker, report_type)\n        \n        elif mode == \"criteria_related_info\":\n            return self._call_criteria_info(ticker, criterion_key)\n\n        else:\n            return Message(\n                text=(\n                    f\"You selected mode '{mode}', which isn't implemented yet.\\n\"\n                    \"In the future, we can add new routes or logic here.\"\n                )\n            )\n\n    def _call_all_financials(self, ticker: str) -> Message:\n        try:\n            payload = {\"ticker\": ticker}\n            response = requests.post(self.FINANCIALS_ENDPOINT, json=payload)\n            response_data = response.json()  \n\n            if \"message\" in response_data:\n                return Message(text=response_data[\"message\"])\n            elif \"data\" in response_data:\n                return Message(text=response_data[\"data\"])\n            else:\n                return Message(text=json.dumps(response_data, indent=2))\n\n        except Exception as e:\n            error_text = f\"Error calling SEC Edgar Lambda (/financials): {e}\"\n            return Message(text=error_text)\n\n    def _call_specific_report(self, ticker: str, report_type: str) -> Message:\n        try:\n            payload = {\"ticker\": ticker, \"report_type\": report_type}\n            response = requests.post(self.SEARCH_ENDPOINT, json=payload)\n            data = response.json()  \n\n            message_text = data.get(\"data\", \"\")\n            return Message(text=message_text)\n\n        except Exception as e:\n            error_text = f\"Error calling SEC Edgar Lambda (/search): {e}\"\n            return Message(text=error_text)\n\n    def _call_criteria_info(self, ticker: str, criterion_key: str) -> Message:\n        try:\n            payload = {\"ticker\": ticker, \"criterion_key\": criterion_key}\n            response = requests.post(self.CRITERIA_ENDPOINT, json=payload)\n            response_data = response.json()  \n\n            if \"message\" in response_data:\n                return Message(text=response_data[\"message\"])\n            elif \"data\" in response_data:\n                return Message(text=response_data[\"data\"])\n            else:\n                return Message(text=json.dumps(response_data, indent=2))\n\n        except Exception as e:\n            error_text = f\"Error calling SEC Edgar Lambda (/get-matching-criteria-attachments): {e}\"\n            return Message(text=error_text)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "criterion_key": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "criterion_key",
                "value": "",
                "display_name": "Criterion Key (Used if mode='criteria_related_info')",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Provide the criterion key to retrieve e.g. 'debt', 'rent', etc.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "mode": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "options": [
                  "all_financials",
                  "specific_report",
                  "criteria_related_info"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "mode",
                "value": "criteria_related_info",
                "display_name": "Mode",
                "advanced": false,
                "dynamic": false,
                "info": "Select 'all_financials' to retrieve the full 10Q XBRL-based data.\nSelect 'specific_report' to retrieve a specific part of the 10Q.\nSelect 'criteria_related_info' to retrieve specific criterion data from the 10Q.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "report_type": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "report_type",
                "value": "",
                "display_name": "Report Type (Used if mode='specific_report')",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "E.g.: 'balance_sheet', 'income_statement', 'operation_statement', or 'cash_flow'.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "ticker": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ticker",
                "value": "",
                "display_name": "Ticker",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The stock ticker symbol (e.g. AAPL).",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component for retrieving financial statements, specific reports, or criteria information from SEC 10-Q filings.",
            "icon": "custom_components",
            "base_classes": [
              "Message"
            ],
            "display_name": "SEC 10-Q Data",
            "documentation": "https://docs.langflow.org/components-custom-components",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "merged_sec_output",
                "hidden": null,
                "display_name": "Merged SEC Output",
                "method": "call_merged_tool",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "ticker",
              "mode",
              "report_type",
              "criterion_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "Sec10QDataExtractor",
          "id": "Sec10QDataExtractor-BHvBs"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 517
        }
      },
      {
        "id": "note-GPAXh",
        "type": "noteNode",
        "position": {
          "x": 4218.914757137112,
          "y": 45
        },
        "data": {
          "node": {
            "description": "# Performance Checklist",
            "display_name": "",
            "documentation": "",
            "template": {}
          },
          "type": "note",
          "id": "note-GPAXh"
        },
        "selected": false,
        "measured": {
          "width": 325,
          "height": 324
        }
      },
      {
        "id": "note-MEa0V",
        "type": "noteNode",
        "position": {
          "x": 3094.8013904666414,
          "y": 1009.2583317793255
        },
        "data": {
          "node": {
            "description": "# Important Metrics",
            "display_name": "",
            "documentation": "",
            "template": {}
          },
          "type": "note",
          "id": "note-MEa0V"
        },
        "selected": false,
        "measured": {
          "width": 325,
          "height": 324
        }
      },
      {
        "id": "ConditionalRouter-rMIOx",
        "type": "genericNode",
        "position": {
          "x": 3604.9212532188467,
          "y": 1270.8996139206788
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "case_sensitive": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "case_sensitive",
                "value": false,
                "display_name": "Case Sensitive",
                "advanced": false,
                "dynamic": false,
                "info": "If true, the comparison will be case sensitive.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import re\n\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass ConditionalRouterComponent(Component):\n    display_name = \"If-Else\"\n    description = \"Routes an input message to a corresponding output based on text comparison.\"\n    icon = \"split\"\n    name = \"ConditionalRouter\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.__iteration_updated = False\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_text\",\n            display_name=\"Text Input\",\n            info=\"The primary text input for the operation.\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"match_text\",\n            display_name=\"Match Text\",\n            info=\"The text input to compare against.\",\n            required=True,\n        ),\n        DropdownInput(\n            name=\"operator\",\n            display_name=\"Operator\",\n            options=[\"equals\", \"not equals\", \"contains\", \"starts with\", \"ends with\", \"regex\"],\n            info=\"The operator to apply for comparing the texts.\",\n            value=\"equals\",\n            real_time_refresh=True,\n        ),\n        BoolInput(\n            name=\"case_sensitive\",\n            display_name=\"Case Sensitive\",\n            info=\"If true, the comparison will be case sensitive.\",\n            value=False,\n        ),\n        MessageInput(\n            name=\"message\",\n            display_name=\"Message\",\n            info=\"The message to pass through either route.\",\n        ),\n        IntInput(\n            name=\"max_iterations\",\n            display_name=\"Max Iterations\",\n            info=\"The maximum number of iterations for the conditional router.\",\n            value=10,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"default_route\",\n            display_name=\"Default Route\",\n            options=[\"true_result\", \"false_result\"],\n            info=\"The default route to take when max iterations are reached.\",\n            value=\"false_result\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"True\", name=\"true_result\", method=\"true_response\"),\n        Output(display_name=\"False\", name=\"false_result\", method=\"false_response\"),\n    ]\n\n    def _pre_run_setup(self):\n        self.__iteration_updated = False\n\n    def evaluate_condition(self, input_text: str, match_text: str, operator: str, *, case_sensitive: bool) -> bool:\n        if not case_sensitive and operator != \"regex\":\n            input_text = input_text.lower()\n            match_text = match_text.lower()\n\n        if operator == \"equals\":\n            return input_text == match_text\n        if operator == \"not equals\":\n            return input_text != match_text\n        if operator == \"contains\":\n            return match_text in input_text\n        if operator == \"starts with\":\n            return input_text.startswith(match_text)\n        if operator == \"ends with\":\n            return input_text.endswith(match_text)\n        if operator == \"regex\":\n            try:\n                return bool(re.match(match_text, input_text))\n            except re.error:\n                return False  # Return False if the regex is invalid\n        return False\n\n    def iterate_and_stop_once(self, route_to_stop: str):\n        if not self.__iteration_updated:\n            self.update_ctx({f\"{self._id}_iteration\": self.ctx.get(f\"{self._id}_iteration\", 0) + 1})\n            self.__iteration_updated = True\n            if self.ctx.get(f\"{self._id}_iteration\", 0) >= self.max_iterations and route_to_stop == self.default_route:\n                route_to_stop = \"true_result\" if route_to_stop == \"false_result\" else \"false_result\"\n            self.stop(route_to_stop)\n\n    def true_response(self) -> Message:\n        result = self.evaluate_condition(\n            self.input_text, self.match_text, self.operator, case_sensitive=self.case_sensitive\n        )\n        if result:\n            self.status = self.message\n            self.iterate_and_stop_once(\"false_result\")\n            return self.message\n        self.iterate_and_stop_once(\"true_result\")\n        return Message(content=\"\")\n\n    def false_response(self) -> Message:\n        result = self.evaluate_condition(\n            self.input_text, self.match_text, self.operator, case_sensitive=self.case_sensitive\n        )\n        if not result:\n            self.status = self.message\n            self.iterate_and_stop_once(\"true_result\")\n            return self.message\n        self.iterate_and_stop_once(\"false_result\")\n        return Message(content=\"\")\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        if field_name == \"operator\":\n            if field_value == \"regex\":\n                build_config.pop(\"case_sensitive\", None)\n\n            # Ensure case_sensitive is present for all other operators\n            elif \"case_sensitive\" not in build_config:\n                case_sensitive_input = next(\n                    (input_field for input_field in self.inputs if input_field.name == \"case_sensitive\"), None\n                )\n                if case_sensitive_input:\n                    build_config[\"case_sensitive\"] = case_sensitive_input.to_dict()\n        return build_config\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "default_route": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "true_result",
                  "false_result"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "default_route",
                "value": "false_result",
                "display_name": "Default Route",
                "advanced": true,
                "dynamic": false,
                "info": "The default route to take when max iterations are reached.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "input_text": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "input_text",
                "value": "",
                "display_name": "Text Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The primary text input for the operation.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "match_text": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "match_text",
                "value": "performance_and_metrics",
                "display_name": "Match Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The text input to compare against.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "max_iterations": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_iterations",
                "value": 10,
                "display_name": "Max Iterations",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of iterations for the conditional router.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "message": {
                "trace_as_input": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "message",
                "value": "",
                "display_name": "Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The message to pass through either route.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "operator": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "equals",
                  "not equals",
                  "contains",
                  "starts with",
                  "ends with",
                  "regex"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "operator",
                "value": "contains",
                "display_name": "Operator",
                "advanced": false,
                "dynamic": false,
                "info": "The operator to apply for comparing the texts.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              }
            },
            "description": "Routes an input message to a corresponding output based on text comparison.",
            "icon": "split",
            "base_classes": [
              "Message"
            ],
            "display_name": "If-Else",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "true_result",
                "hidden": null,
                "display_name": "True",
                "method": "true_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "false_result",
                "hidden": null,
                "display_name": "False",
                "method": "false_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_text",
              "match_text",
              "operator",
              "case_sensitive",
              "message",
              "max_iterations",
              "default_route"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "logic",
            "key": "ConditionalRouter",
            "score": 0.001,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "ConditionalRouter",
          "id": "ConditionalRouter-rMIOx"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 588
        }
      },
      {
        "id": "PromptInvocator-Z0j15",
        "type": "genericNode",
        "position": {
          "x": 5702.916223918059,
          "y": 1238.9509865357315
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "input_json": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_json",
                "value": "",
                "display_name": "Input Json",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to send to the prompt invocation.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "agent_llm": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "OpenAI"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_llm",
                "value": "OpenAI",
                "display_name": "LLM Provider",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "body_to_append": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body_to_append",
                "value": "",
                "display_name": "Body To Append",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Body to be appended after the prompt.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.inputs import DropdownInput\nfrom langflow.io import MessageTextInput, Output, DataInput, MultilineInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.helpers.data import data_to_text\nimport requests\nimport json\n\nclass PromptInvocatorComponent(Component):\n    display_name = \"Prompt Invocator\"\n    description = \"A custom component for running a prompt using a prompt key.\"\n    documentation = \"https://docs.langflow.org/components-custom-components\"\n    icon = \"custom_components\"\n    name = \"PromptInvocator\"\n\n    KOALAGAINS_INVOCATION_ENDPOINT = \"https://koalagains.com/api/actions/prompt-invocation/full-req-resp\"\n    \n    inputs = [\n        DataInput(\n            name=\"input_json\",\n            display_name=\"Input Json\",\n            info=\"The data to send to the prompt invocation.\",\n        ),\n        MessageTextInput(\n            name=\"prompt_key\",\n            display_name=\"Prompt Key\",\n            info=\"The key added when creating the prompt.\",\n            required=True,\n        ),\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"LLM Provider\",\n            options=[\"OpenAI\"],\n            value=\"OpenAI\",\n        ),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            options=[\"gpt-4o-mini\", \"gpt-4o\", \"o3-mini\", \"o4-mini\"],\n            value=\"gpt-4o\",\n        ),\n        MultilineInput(\n            name=\"body_to_append\",\n            display_name=\"Body To Append\",\n            info=\"Body to be appended after the prompt.\",\n        ),\n        DropdownInput(\n            name=\"output_type\",\n            display_name=\"Output Type\",\n            options=[\"Data\", \"Message\"],\n            value=\"Data\",\n            info=\"Select the type of output returned by the component.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Data\",\n            name=\"invocation_output\",\n            method=\"output_data\",\n        ),\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            method=\"output_message\",\n        ),\n    ]\n\n    def call_prompt_invocator(self) -> Data:\n        \"\"\"Calls the API and returns the raw Data output.\"\"\"\n        input_json = self.input_json.data if self.input_json and self.input_json.data else {}\n        prompt_key = self.prompt_key\n        agent_llm = self.agent_llm\n        model = self.model\n        body_to_append = self.body_to_append\n\n        payload = {\n            \"inputJson\": input_json,\n            \"promptKey\": prompt_key,\n            \"llmProvider\": agent_llm,\n            \"model\": model,\n            \"bodyToAppend\": body_to_append,\n            \"requestFrom\": \"langflow\"\n        }\n        try:\n            response = requests.post(self.KOALAGAINS_INVOCATION_ENDPOINT, json=payload)\n            try:\n                resp_data = response.json()\n            except json.JSONDecodeError:\n                resp_data = {\"raw_text\": response.text}\n            return Data(data=resp_data)\n        except Exception as exc:\n            return Data(data={\"error\": str(exc)})\n\n    def output_data(self) -> Data:\n        if self.output_type == \"Data\":\n            return self.call_prompt_invocator()\n        return Data(data={})\n\n    def output_message(self) -> Message:\n        if self.output_type == \"Message\":\n            data = self.call_prompt_invocator()\n            try:\n                text = data_to_text(\"{message}\", data)\n                return Message(text=text)\n            except Exception as exc:\n                return Message(text=str(exc))\n        return Message(text=\"\")\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "o3-mini",
                  "o4-mini"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model",
                "value": "o4-mini",
                "display_name": "Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "output_type": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Data",
                  "Message"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "output_type",
                "value": "Data",
                "display_name": "Output Type",
                "advanced": false,
                "dynamic": false,
                "info": "Select the type of output returned by the component.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "prompt_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "prompt_key",
                "value": "US/public-equities/real-estate/equity-reits/rental-health/metrics",
                "display_name": "Prompt Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The key added when creating the prompt.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component for running a prompt using a prompt key.",
            "icon": "custom_components",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Prompt Invocator",
            "documentation": "https://docs.langflow.org/components-custom-components",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "invocation_output",
                "hidden": null,
                "display_name": "Data",
                "method": "output_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "hidden": null,
                "display_name": "Message",
                "method": "output_message",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_json",
              "prompt_key",
              "agent_llm",
              "model",
              "body_to_append",
              "output_type"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "PromptInvocator",
          "id": "PromptInvocator-Z0j15"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 672
        }
      },
      {
        "id": "PromptInvocator-ZptAE",
        "type": "genericNode",
        "position": {
          "x": 4910.153353473894,
          "y": 976.8821675678512
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "input_json": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_json",
                "value": "",
                "display_name": "Input Json",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to send to the prompt invocation.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "agent_llm": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "OpenAI"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_llm",
                "value": "OpenAI",
                "display_name": "LLM Provider",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "body_to_append": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body_to_append",
                "value": "",
                "display_name": "Body To Append",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Body to be appended after the prompt.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.inputs import DropdownInput\nfrom langflow.io import MessageTextInput, Output, DataInput, MultilineInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.helpers.data import data_to_text\nimport requests\nimport json\n\nclass PromptInvocatorComponent(Component):\n    display_name = \"Prompt Invocator\"\n    description = \"A custom component for running a prompt using a prompt key.\"\n    documentation = \"https://docs.langflow.org/components-custom-components\"\n    icon = \"custom_components\"\n    name = \"PromptInvocator\"\n\n    KOALAGAINS_INVOCATION_ENDPOINT = \"https://koalagains.com/api/actions/prompt-invocation/full-req-resp\"\n    \n    inputs = [\n        DataInput(\n            name=\"input_json\",\n            display_name=\"Input Json\",\n            info=\"The data to send to the prompt invocation.\",\n        ),\n        MessageTextInput(\n            name=\"prompt_key\",\n            display_name=\"Prompt Key\",\n            info=\"The key added when creating the prompt.\",\n            required=True,\n        ),\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"LLM Provider\",\n            options=[\"OpenAI\"],\n            value=\"OpenAI\",\n        ),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            options=[\"gpt-4o-mini\", \"gpt-4o\", \"o3-mini\", \"o4-mini\"],\n            value=\"gpt-4o\",\n        ),\n        MultilineInput(\n            name=\"body_to_append\",\n            display_name=\"Body To Append\",\n            info=\"Body to be appended after the prompt.\",\n        ),\n        DropdownInput(\n            name=\"output_type\",\n            display_name=\"Output Type\",\n            options=[\"Data\", \"Message\"],\n            value=\"Data\",\n            info=\"Select the type of output returned by the component.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Data\",\n            name=\"invocation_output\",\n            method=\"output_data\",\n        ),\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            method=\"output_message\",\n        ),\n    ]\n\n    def call_prompt_invocator(self) -> Data:\n        \"\"\"Calls the API and returns the raw Data output.\"\"\"\n        input_json = self.input_json.data if self.input_json and self.input_json.data else {}\n        prompt_key = self.prompt_key\n        agent_llm = self.agent_llm\n        model = self.model\n        body_to_append = self.body_to_append\n\n        payload = {\n            \"inputJson\": input_json,\n            \"promptKey\": prompt_key,\n            \"llmProvider\": agent_llm,\n            \"model\": model,\n            \"bodyToAppend\": body_to_append,\n            \"requestFrom\": \"langflow\"\n        }\n        try:\n            response = requests.post(self.KOALAGAINS_INVOCATION_ENDPOINT, json=payload)\n            try:\n                resp_data = response.json()\n            except json.JSONDecodeError:\n                resp_data = {\"raw_text\": response.text}\n            return Data(data=resp_data)\n        except Exception as exc:\n            return Data(data={\"error\": str(exc)})\n\n    def output_data(self) -> Data:\n        if self.output_type == \"Data\":\n            return self.call_prompt_invocator()\n        return Data(data={})\n\n    def output_message(self) -> Message:\n        if self.output_type == \"Message\":\n            data = self.call_prompt_invocator()\n            try:\n                text = data_to_text(\"{message}\", data)\n                return Message(text=text)\n            except Exception as exc:\n                return Message(text=str(exc))\n        return Message(text=\"\")\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "o3-mini",
                  "o4-mini"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model",
                "value": "o4-mini",
                "display_name": "Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "output_type": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Data",
                  "Message"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "output_type",
                "value": "Message",
                "display_name": "Output Type",
                "advanced": false,
                "dynamic": false,
                "info": "Select the type of output returned by the component.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "prompt_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "prompt_key",
                "value": "US/public-equities/real-estate/equity-reits/rental-health/diversification-score",
                "display_name": "Prompt Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The key added when creating the prompt.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component for running a prompt using a prompt key.",
            "icon": "custom_components",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Prompt Invocator",
            "documentation": "https://docs.langflow.org/components-custom-components",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "invocation_output",
                "hidden": null,
                "display_name": "Data",
                "method": "output_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "hidden": null,
                "display_name": "Message",
                "method": "output_message",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_json",
              "prompt_key",
              "agent_llm",
              "model",
              "body_to_append",
              "output_type"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "PromptInvocator",
          "id": "PromptInvocator-ZptAE"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 672
        }
      },
      {
        "id": "PromptInvocator-JFlLk",
        "type": "genericNode",
        "position": {
          "x": 4905.505229977498,
          "y": 1733.6184784229363
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "input_json": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_json",
                "value": "",
                "display_name": "Input Json",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to send to the prompt invocation.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "agent_llm": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "OpenAI"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_llm",
                "value": "OpenAI",
                "display_name": "LLM Provider",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "body_to_append": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body_to_append",
                "value": "",
                "display_name": "Body To Append",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Body to be appended after the prompt.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.inputs import DropdownInput\nfrom langflow.io import MessageTextInput, Output, DataInput, MultilineInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.helpers.data import data_to_text\nimport requests\nimport json\n\nclass PromptInvocatorComponent(Component):\n    display_name = \"Prompt Invocator\"\n    description = \"A custom component for running a prompt using a prompt key.\"\n    documentation = \"https://docs.langflow.org/components-custom-components\"\n    icon = \"custom_components\"\n    name = \"PromptInvocator\"\n\n    KOALAGAINS_INVOCATION_ENDPOINT = \"https://koalagains.com/api/actions/prompt-invocation/full-req-resp\"\n    \n    inputs = [\n        DataInput(\n            name=\"input_json\",\n            display_name=\"Input Json\",\n            info=\"The data to send to the prompt invocation.\",\n        ),\n        MessageTextInput(\n            name=\"prompt_key\",\n            display_name=\"Prompt Key\",\n            info=\"The key added when creating the prompt.\",\n            required=True,\n        ),\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"LLM Provider\",\n            options=[\"OpenAI\"],\n            value=\"OpenAI\",\n        ),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            options=[\"gpt-4o-mini\", \"gpt-4o\", \"o3-mini\", \"o4-mini\"],\n            value=\"gpt-4o\",\n        ),\n        MultilineInput(\n            name=\"body_to_append\",\n            display_name=\"Body To Append\",\n            info=\"Body to be appended after the prompt.\",\n        ),\n        DropdownInput(\n            name=\"output_type\",\n            display_name=\"Output Type\",\n            options=[\"Data\", \"Message\"],\n            value=\"Data\",\n            info=\"Select the type of output returned by the component.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Data\",\n            name=\"invocation_output\",\n            method=\"output_data\",\n        ),\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            method=\"output_message\",\n        ),\n    ]\n\n    def call_prompt_invocator(self) -> Data:\n        \"\"\"Calls the API and returns the raw Data output.\"\"\"\n        input_json = self.input_json.data if self.input_json and self.input_json.data else {}\n        prompt_key = self.prompt_key\n        agent_llm = self.agent_llm\n        model = self.model\n        body_to_append = self.body_to_append\n\n        payload = {\n            \"inputJson\": input_json,\n            \"promptKey\": prompt_key,\n            \"llmProvider\": agent_llm,\n            \"model\": model,\n            \"bodyToAppend\": body_to_append,\n            \"requestFrom\": \"langflow\"\n        }\n        try:\n            response = requests.post(self.KOALAGAINS_INVOCATION_ENDPOINT, json=payload)\n            try:\n                resp_data = response.json()\n            except json.JSONDecodeError:\n                resp_data = {\"raw_text\": response.text}\n            return Data(data=resp_data)\n        except Exception as exc:\n            return Data(data={\"error\": str(exc)})\n\n    def output_data(self) -> Data:\n        if self.output_type == \"Data\":\n            return self.call_prompt_invocator()\n        return Data(data={})\n\n    def output_message(self) -> Message:\n        if self.output_type == \"Message\":\n            data = self.call_prompt_invocator()\n            try:\n                text = data_to_text(\"{message}\", data)\n                return Message(text=text)\n            except Exception as exc:\n                return Message(text=str(exc))\n        return Message(text=\"\")\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "o3-mini",
                  "o4-mini"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model",
                "value": "o4-mini",
                "display_name": "Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "output_type": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Data",
                  "Message"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "output_type",
                "value": "Message",
                "display_name": "Output Type",
                "advanced": false,
                "dynamic": false,
                "info": "Select the type of output returned by the component.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "prompt_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "prompt_key",
                "value": "US/public-equities/real-estate/equity-reits/rental-health/lease-expirations",
                "display_name": "Prompt Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The key added when creating the prompt.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component for running a prompt using a prompt key.",
            "icon": "custom_components",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Prompt Invocator",
            "documentation": "https://docs.langflow.org/components-custom-components",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "invocation_output",
                "hidden": null,
                "display_name": "Data",
                "method": "output_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "hidden": null,
                "display_name": "Message",
                "method": "output_message",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_json",
              "prompt_key",
              "agent_llm",
              "model",
              "body_to_append",
              "output_type"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "PromptInvocator",
          "id": "PromptInvocator-JFlLk"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 672
        }
      },
      {
        "id": "PromptInvocator-f6mwK",
        "type": "genericNode",
        "position": {
          "x": 5509.51130234964,
          "y": 56.23734843638431
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "input_json": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_json",
                "value": "",
                "display_name": "Input Json",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to send to the prompt invocation.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "agent_llm": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "OpenAI"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_llm",
                "value": "OpenAI",
                "display_name": "LLM Provider",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "body_to_append": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body_to_append",
                "value": "",
                "display_name": "Body To Append",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Body to be appended after the prompt.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.inputs import DropdownInput\nfrom langflow.io import MessageTextInput, Output, DataInput, MultilineInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.helpers.data import data_to_text\nimport requests\nimport json\n\nclass PromptInvocatorComponent(Component):\n    display_name = \"Prompt Invocator\"\n    description = \"A custom component for running a prompt using a prompt key.\"\n    documentation = \"https://docs.langflow.org/components-custom-components\"\n    icon = \"custom_components\"\n    name = \"PromptInvocator\"\n\n    KOALAGAINS_INVOCATION_ENDPOINT = \"https://koalagains.com/api/actions/prompt-invocation/full-req-resp\"\n    \n    inputs = [\n        DataInput(\n            name=\"input_json\",\n            display_name=\"Input Json\",\n            info=\"The data to send to the prompt invocation.\",\n        ),\n        MessageTextInput(\n            name=\"prompt_key\",\n            display_name=\"Prompt Key\",\n            info=\"The key added when creating the prompt.\",\n            required=True,\n        ),\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"LLM Provider\",\n            options=[\"OpenAI\"],\n            value=\"OpenAI\",\n        ),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            options=[\"gpt-4o-mini\", \"gpt-4o\", \"o3-mini\", \"o4-mini\"],\n            value=\"gpt-4o\",\n        ),\n        MultilineInput(\n            name=\"body_to_append\",\n            display_name=\"Body To Append\",\n            info=\"Body to be appended after the prompt.\",\n        ),\n        DropdownInput(\n            name=\"output_type\",\n            display_name=\"Output Type\",\n            options=[\"Data\", \"Message\"],\n            value=\"Data\",\n            info=\"Select the type of output returned by the component.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Data\",\n            name=\"invocation_output\",\n            method=\"output_data\",\n        ),\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            method=\"output_message\",\n        ),\n    ]\n\n    def call_prompt_invocator(self) -> Data:\n        \"\"\"Calls the API and returns the raw Data output.\"\"\"\n        input_json = self.input_json.data if self.input_json and self.input_json.data else {}\n        prompt_key = self.prompt_key\n        agent_llm = self.agent_llm\n        model = self.model\n        body_to_append = self.body_to_append\n\n        payload = {\n            \"inputJson\": input_json,\n            \"promptKey\": prompt_key,\n            \"llmProvider\": agent_llm,\n            \"model\": model,\n            \"bodyToAppend\": body_to_append,\n            \"requestFrom\": \"langflow\"\n        }\n        try:\n            response = requests.post(self.KOALAGAINS_INVOCATION_ENDPOINT, json=payload)\n            try:\n                resp_data = response.json()\n            except json.JSONDecodeError:\n                resp_data = {\"raw_text\": response.text}\n            return Data(data=resp_data)\n        except Exception as exc:\n            return Data(data={\"error\": str(exc)})\n\n    def output_data(self) -> Data:\n        if self.output_type == \"Data\":\n            return self.call_prompt_invocator()\n        return Data(data={})\n\n    def output_message(self) -> Message:\n        if self.output_type == \"Message\":\n            data = self.call_prompt_invocator()\n            try:\n                text = data_to_text(\"{message}\", data)\n                return Message(text=text)\n            except Exception as exc:\n                return Message(text=str(exc))\n        return Message(text=\"\")\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "o3-mini",
                  "o4-mini"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model",
                "value": "o4-mini",
                "display_name": "Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "output_type": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Data",
                  "Message"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "output_type",
                "value": "Data",
                "display_name": "Output Type",
                "advanced": false,
                "dynamic": false,
                "info": "Select the type of output returned by the component.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "prompt_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "prompt_key",
                "value": "US/public-equities/real-estate/equity-reits/rental-health/performance-checklist",
                "display_name": "Prompt Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The key added when creating the prompt.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component for running a prompt using a prompt key.",
            "icon": "custom_components",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Prompt Invocator",
            "documentation": "https://docs.langflow.org/components-custom-components",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "invocation_output",
                "hidden": null,
                "display_name": "Data",
                "method": "output_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "hidden": null,
                "display_name": "Message",
                "method": "output_message",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_json",
              "prompt_key",
              "agent_llm",
              "model",
              "body_to_append",
              "output_type"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "PromptInvocator",
          "id": "PromptInvocator-f6mwK"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 672
        }
      },
      {
        "id": "ParseData-YxS5j",
        "type": "genericNode",
        "position": {
          "x": 4755.809269082827,
          "y": 391.11086220586776
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text, data_to_text_list\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Data to Message\"\n    description = \"Convert Data objects into Messages using any {field_name} from input data.\"\n    icon = \"message-square\"\n    name = \"ParseData\"\n    metadata = {\n        \"legacy_name\": \"Parse Data\",\n    }\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"The data to convert to text.\",\n            is_list=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n            required=True,\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input Data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of new Data, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[list[Data], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> list[Data]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item.set_text(text)\n        self.status = data_list\n        return data_list\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{metrics}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data objects into Messages using any {field_name} from input data.",
            "icon": "message-square",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Data to Message",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Message",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data_list",
                "display_name": "Data List",
                "method": "parse_data_as_list",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {
              "legacy_name": "Parse Data"
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ParseData",
          "id": "ParseData-YxS5j"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 342
        }
      },
      {
        "id": "ChatOutput-s5NbK",
        "type": "genericNode",
        "position": {
          "x": 6200.939433583122,
          "y": 1300.6499115559564
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "input_value": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "background_color": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "background_color",
                "value": "",
                "display_name": "Background Color",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The background color of the icon.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "chat_icon": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chat_icon",
                "value": "",
                "display_name": "Icon",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The icon of the message.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "clean_data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "clean_data",
                "value": true,
                "display_name": "Basic Clean Data",
                "advanced": true,
                "dynamic": false,
                "info": "Whether to clean the data",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if not isinstance(self.input_value, Data | DataFrame | Message | str | list):\n            msg = f\"Expected Data or DataFrame or Message or str, got {type(self.input_value).__name__}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n                return data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        return self._safe_convert(self.input_value)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data_template",
                "value": "{text}",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "AI",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "text_color": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_color",
                "value": "",
                "display_name": "Text Color",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The text color of the name",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "MessagesSquare",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "minimized": true,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatOutput",
          "id": "ChatOutput-s5NbK"
        },
        "selected": false,
        "measured": {
          "width": 192,
          "height": 66
        }
      },
      {
        "id": "ChatOutput-UfSPo",
        "type": "genericNode",
        "position": {
          "x": 5969.9394335831275,
          "y": 179.64991155596306
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "input_value": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "background_color": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "background_color",
                "value": "",
                "display_name": "Background Color",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The background color of the icon.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "chat_icon": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chat_icon",
                "value": "",
                "display_name": "Icon",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The icon of the message.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "clean_data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "clean_data",
                "value": true,
                "display_name": "Basic Clean Data",
                "advanced": true,
                "dynamic": false,
                "info": "Whether to clean the data",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if not isinstance(self.input_value, Data | DataFrame | Message | str | list):\n            msg = f\"Expected Data or DataFrame or Message or str, got {type(self.input_value).__name__}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n                return data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        return self._safe_convert(self.input_value)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data_template",
                "value": "{text}",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "AI",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "text_color": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_color",
                "value": "",
                "display_name": "Text Color",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The text color of the name",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "MessagesSquare",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "minimized": true,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatOutput",
          "id": "ChatOutput-UfSPo"
        },
        "selected": false,
        "measured": {
          "width": 192,
          "height": 66
        }
      },
      {
        "id": "Custom Webhook-HE2rv",
        "type": "genericNode",
        "position": {
          "x": 15,
          "y": 2276.649911555957
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\n\nfrom langflow.custom import Component\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass WebhookComponent(Component):\n    display_name = \"Custom Webhook\"\n    description = \"Defines a webhook input for the flow.\"\n    name = \"Custom Webhook\"\n    icon = \"webhook\"\n\n    inputs = [\n        MultilineInput(\n            name=\"data\",\n            display_name=\"Payload\",\n            info=\"Receives a payload from external systems via HTTP POST.\",\n        )\n    ]\n    outputs = [\n        Output(display_name=\"Data\", name=\"output_data\", method=\"build_data\"),\n        Output(display_name=\"ticker\", name=\"ticker\", method=\"build_ticker\"),\n        Output(display_name=\"criterionKey\", name=\"criterionKey\", method=\"build_criterion_key\"),\n        Output(display_name=\"reportKey\", name=\"reportKey\", method=\"build_report_key\"),\n    ]\n    \n    def build_data(self) -> Data:\n        message: str | Data = \"\"\n        if not self.data:\n            self.status = \"No data provided.\"\n            return Data(data={})\n        try:\n            body = json.loads(self.data or \"{}\")\n        except json.JSONDecodeError:\n            body = {\"payload\": self.data}\n            message = f\"Invalid JSON payload. Please check the format.\\n\\n{self.data}\"\n        data = Data(data=body)\n        if not message:\n            message = data\n        self.status = message\n        return data\n\n    def _parse_payload(self) -> dict:\n        \"\"\"Helper method to parse JSON payload and handle errors.\"\"\"\n        if not self.data:\n            self.status = \"No data provided.\"\n            return {}\n        try:\n            return json.loads(self.data)\n        except json.JSONDecodeError:\n            self.status = f\"Invalid JSON payload. Please check the format.\\n\\n{self.data}\"\n            # Return the raw payload under a dedicated key if needed\n            return {\"payload\": self.data}\n\n    def build_ticker(self) -> Message:\n        \"\"\"Extracts the 'ticker' value from the payload.\"\"\"\n        payload = self._parse_payload()\n        ticker = payload.get(\"ticker\", \"\")\n        return Message(text=ticker)\n\n    def build_criterion_key(self) -> Message:\n        \"\"\"Extracts the 'key' from the nested 'criterion' field.\"\"\"\n        payload = self._parse_payload()\n        criterion = payload.get(\"criterion\", {})\n        criterion_key = criterion.get(\"key\", \"\")\n        return Message(text=criterion_key)\n\n    def build_report_key(self) -> Message:\n        \"\"\"Extracts the 'reportKey' value from the payload.\"\"\"\n        payload = self._parse_payload()\n        report_key = payload.get(\"reportKey\", \"\")\n        return Message(text=report_key)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Payload",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Receives a payload from external systems via HTTP POST.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Defines a webhook input for the flow.",
            "icon": "webhook",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Custom Webhook",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "output_data",
                "display_name": "Data",
                "method": "build_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "ticker",
                "display_name": "ticker",
                "method": "build_ticker",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "criterionKey",
                "display_name": "criterionKey",
                "method": "build_criterion_key",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "reportKey",
                "display_name": "reportKey",
                "method": "build_report_key",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "data"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "Custom Webhook",
          "id": "Custom Webhook-HE2rv"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 373
        }
      },
      {
        "id": "PromptInvocator-GzIho",
        "type": "genericNode",
        "position": {
          "x": 4917.736839650871,
          "y": 2484.52782678648
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "input_json": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_json",
                "value": "",
                "display_name": "Input Json",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to send to the prompt invocation.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "agent_llm": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "OpenAI"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_llm",
                "value": "OpenAI",
                "display_name": "LLM Provider",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "body_to_append": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body_to_append",
                "value": "",
                "display_name": "Body To Append",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Body to be appended after the prompt.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.inputs import DropdownInput\nfrom langflow.io import MessageTextInput, Output, DataInput, MultilineInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.helpers.data import data_to_text\nimport requests\nimport json\n\nclass PromptInvocatorComponent(Component):\n    display_name = \"Prompt Invocator\"\n    description = \"A custom component for running a prompt using a prompt key.\"\n    documentation = \"https://docs.langflow.org/components-custom-components\"\n    icon = \"custom_components\"\n    name = \"PromptInvocator\"\n\n    KOALAGAINS_INVOCATION_ENDPOINT = \"https://koalagains.com/api/actions/prompt-invocation/full-req-resp\"\n    \n    inputs = [\n        DataInput(\n            name=\"input_json\",\n            display_name=\"Input Json\",\n            info=\"The data to send to the prompt invocation.\",\n        ),\n        MessageTextInput(\n            name=\"prompt_key\",\n            display_name=\"Prompt Key\",\n            info=\"The key added when creating the prompt.\",\n            required=True,\n        ),\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"LLM Provider\",\n            options=[\"OpenAI\"],\n            value=\"OpenAI\",\n        ),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            options=[\"gpt-4o-mini\", \"gpt-4o\", \"o3-mini\", \"o4-mini\"],\n            value=\"gpt-4o\",\n        ),\n        MultilineInput(\n            name=\"body_to_append\",\n            display_name=\"Body To Append\",\n            info=\"Body to be appended after the prompt.\",\n        ),\n        DropdownInput(\n            name=\"output_type\",\n            display_name=\"Output Type\",\n            options=[\"Data\", \"Message\"],\n            value=\"Data\",\n            info=\"Select the type of output returned by the component.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Data\",\n            name=\"invocation_output\",\n            method=\"output_data\",\n        ),\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            method=\"output_message\",\n        ),\n    ]\n\n    def call_prompt_invocator(self) -> Data:\n        \"\"\"Calls the API and returns the raw Data output.\"\"\"\n        input_json = self.input_json.data if self.input_json and self.input_json.data else {}\n        prompt_key = self.prompt_key\n        agent_llm = self.agent_llm\n        model = self.model\n        body_to_append = self.body_to_append\n\n        payload = {\n            \"inputJson\": input_json,\n            \"promptKey\": prompt_key,\n            \"llmProvider\": agent_llm,\n            \"model\": model,\n            \"bodyToAppend\": body_to_append,\n            \"requestFrom\": \"langflow\"\n        }\n        try:\n            response = requests.post(self.KOALAGAINS_INVOCATION_ENDPOINT, json=payload)\n            try:\n                resp_data = response.json()\n            except json.JSONDecodeError:\n                resp_data = {\"raw_text\": response.text}\n            return Data(data=resp_data)\n        except Exception as exc:\n            return Data(data={\"error\": str(exc)})\n\n    def output_data(self) -> Data:\n        if self.output_type == \"Data\":\n            return self.call_prompt_invocator()\n        return Data(data={})\n\n    def output_message(self) -> Message:\n        if self.output_type == \"Message\":\n            data = self.call_prompt_invocator()\n            try:\n                text = data_to_text(\"{message}\", data)\n                return Message(text=text)\n            except Exception as exc:\n                return Message(text=str(exc))\n        return Message(text=\"\")\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "o3-mini",
                  "o4-mini"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model",
                "value": "o4-mini",
                "display_name": "Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "output_type": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Data",
                  "Message"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "output_type",
                "value": "Message",
                "display_name": "Output Type",
                "advanced": false,
                "dynamic": false,
                "info": "Select the type of output returned by the component.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "prompt_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "prompt_key",
                "value": "US/public-equities/real-estate/equity-reits/rental-health/tenant-quality-score",
                "display_name": "Prompt Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The key added when creating the prompt.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component for running a prompt using a prompt key.",
            "icon": "custom_components",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Prompt Invocator",
            "documentation": "https://docs.langflow.org/components-custom-components",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "invocation_output",
                "display_name": "Data",
                "method": "output_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Message",
                "method": "output_message",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_json",
              "prompt_key",
              "agent_llm",
              "model",
              "body_to_append",
              "output_type"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "dodao_sec_tools",
            "key": "PromptInvocator",
            "score": 0.007568328950209746
          },
          "showNode": true,
          "type": "PromptInvocator",
          "id": "PromptInvocator-GzIho"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 672
        }
      },
      {
        "id": "PromptInvocator-5PFMX",
        "type": "genericNode",
        "position": {
          "x": 4933.69860312211,
          "y": 3255.2608617914857
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "input_json": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_json",
                "value": "",
                "display_name": "Input Json",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to send to the prompt invocation.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "agent_llm": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "OpenAI"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_llm",
                "value": "OpenAI",
                "display_name": "LLM Provider",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "body_to_append": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body_to_append",
                "value": "",
                "display_name": "Body To Append",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Body to be appended after the prompt.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.inputs import DropdownInput\nfrom langflow.io import MessageTextInput, Output, DataInput, MultilineInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.helpers.data import data_to_text\nimport requests\nimport json\n\nclass PromptInvocatorComponent(Component):\n    display_name = \"Prompt Invocator\"\n    description = \"A custom component for running a prompt using a prompt key.\"\n    documentation = \"https://docs.langflow.org/components-custom-components\"\n    icon = \"custom_components\"\n    name = \"PromptInvocator\"\n\n    KOALAGAINS_INVOCATION_ENDPOINT = \"https://koalagains.com/api/actions/prompt-invocation/full-req-resp\"\n    \n    inputs = [\n        DataInput(\n            name=\"input_json\",\n            display_name=\"Input Json\",\n            info=\"The data to send to the prompt invocation.\",\n        ),\n        MessageTextInput(\n            name=\"prompt_key\",\n            display_name=\"Prompt Key\",\n            info=\"The key added when creating the prompt.\",\n            required=True,\n        ),\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"LLM Provider\",\n            options=[\"OpenAI\"],\n            value=\"OpenAI\",\n        ),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            options=[\"gpt-4o-mini\", \"gpt-4o\", \"o3-mini\", \"o4-mini\"],\n            value=\"gpt-4o\",\n        ),\n        MultilineInput(\n            name=\"body_to_append\",\n            display_name=\"Body To Append\",\n            info=\"Body to be appended after the prompt.\",\n        ),\n        DropdownInput(\n            name=\"output_type\",\n            display_name=\"Output Type\",\n            options=[\"Data\", \"Message\"],\n            value=\"Data\",\n            info=\"Select the type of output returned by the component.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Data\",\n            name=\"invocation_output\",\n            method=\"output_data\",\n        ),\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            method=\"output_message\",\n        ),\n    ]\n\n    def call_prompt_invocator(self) -> Data:\n        \"\"\"Calls the API and returns the raw Data output.\"\"\"\n        input_json = self.input_json.data if self.input_json and self.input_json.data else {}\n        prompt_key = self.prompt_key\n        agent_llm = self.agent_llm\n        model = self.model\n        body_to_append = self.body_to_append\n\n        payload = {\n            \"inputJson\": input_json,\n            \"promptKey\": prompt_key,\n            \"llmProvider\": agent_llm,\n            \"model\": model,\n            \"bodyToAppend\": body_to_append,\n            \"requestFrom\": \"langflow\"\n        }\n        try:\n            response = requests.post(self.KOALAGAINS_INVOCATION_ENDPOINT, json=payload)\n            try:\n                resp_data = response.json()\n            except json.JSONDecodeError:\n                resp_data = {\"raw_text\": response.text}\n            return Data(data=resp_data)\n        except Exception as exc:\n            return Data(data={\"error\": str(exc)})\n\n    def output_data(self) -> Data:\n        if self.output_type == \"Data\":\n            return self.call_prompt_invocator()\n        return Data(data={})\n\n    def output_message(self) -> Message:\n        if self.output_type == \"Message\":\n            data = self.call_prompt_invocator()\n            try:\n                text = data_to_text(\"{message}\", data)\n                return Message(text=text)\n            except Exception as exc:\n                return Message(text=str(exc))\n        return Message(text=\"\")\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "o3-mini",
                  "o4-mini"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model",
                "value": "gpt-4o-mini",
                "display_name": "Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "output_type": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Data",
                  "Message"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "output_type",
                "value": "Message",
                "display_name": "Output Type",
                "advanced": false,
                "dynamic": false,
                "info": "Select the type of output returned by the component.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "prompt_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "prompt_key",
                "value": "US/public-equities/real-estate/equity-reits/rental-health/occupancy-rate",
                "display_name": "Prompt Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The key added when creating the prompt.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component for running a prompt using a prompt key.",
            "icon": "custom_components",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Prompt Invocator",
            "documentation": "https://docs.langflow.org/components-custom-components",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "invocation_output",
                "display_name": "Data",
                "method": "output_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Message",
                "method": "output_message",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_json",
              "prompt_key",
              "agent_llm",
              "model",
              "body_to_append",
              "output_type"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "dodao_sec_tools",
            "key": "PromptInvocator",
            "score": 0.007568328950209746
          },
          "showNode": true,
          "type": "PromptInvocator",
          "id": "PromptInvocator-5PFMX"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 672
        }
      }
    ],
    "edges": [
      {
        "source": "Sec10QDataExtractor-TWjZJ",
        "target": "Prompt-nvcHK",
        "sourceHandle": "{œdataTypeœ:œSec10QDataExtractorœ,œidœ:œSec10QDataExtractor-TWjZJœ,œnameœ:œmerged_sec_outputœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œAll_Financial_Dataœ,œidœ:œPrompt-nvcHKœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Sec10QDataExtractor-TWjZJ{œdataTypeœ:œSec10QDataExtractorœ,œidœ:œSec10QDataExtractor-TWjZJœ,œnameœ:œmerged_sec_outputœ,œoutput_typesœ:[œMessageœ]}-Prompt-nvcHK{œfieldNameœ:œAll_Financial_Dataœ,œidœ:œPrompt-nvcHKœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Sec10QDataExtractor",
            "id": "Sec10QDataExtractor-TWjZJ",
            "name": "merged_sec_output",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "All_Financial_Data",
            "id": "Prompt-nvcHK",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Sec10QDataExtractor-BHvBs",
        "target": "Prompt-nvcHK",
        "sourceHandle": "{œdataTypeœ:œSec10QDataExtractorœ,œidœ:œSec10QDataExtractor-BHvBsœ,œnameœ:œmerged_sec_outputœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œCriterionœ,œidœ:œPrompt-nvcHKœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Sec10QDataExtractor-BHvBs{œdataTypeœ:œSec10QDataExtractorœ,œidœ:œSec10QDataExtractor-BHvBsœ,œnameœ:œmerged_sec_outputœ,œoutput_typesœ:[œMessageœ]}-Prompt-nvcHK{œfieldNameœ:œCriterionœ,œidœ:œPrompt-nvcHKœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Sec10QDataExtractor",
            "id": "Sec10QDataExtractor-BHvBs",
            "name": "merged_sec_output",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "Criterion",
            "id": "Prompt-nvcHK",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Prompt-nvcHK",
        "target": "ConditionalRouter-rMIOx",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-nvcHKœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œConditionalRouter-rMIOxœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Prompt-nvcHK{œdataTypeœ:œPromptœ,œidœ:œPrompt-nvcHKœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-ConditionalRouter-rMIOx{œfieldNameœ:œmessageœ,œidœ:œConditionalRouter-rMIOxœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-nvcHK",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "message",
            "id": "ConditionalRouter-rMIOx",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ConditionalRouter-rMIOx",
        "target": "Prompt-xn1W9",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-rMIOxœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œPrompt-xn1W9œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ConditionalRouter-rMIOx{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-rMIOxœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}-Prompt-xn1W9{œfieldNameœ:œdataœ,œidœ:œPrompt-xn1W9œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-rMIOx",
            "name": "true_result",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "data",
            "id": "Prompt-xn1W9",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Prompt-nvcHK",
        "target": "Prompt-d5caQ",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-nvcHKœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œfinancialAndAttachmentsœ,œidœ:œPrompt-d5caQœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Prompt-nvcHK{œdataTypeœ:œPromptœ,œidœ:œPrompt-nvcHKœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Prompt-d5caQ{œfieldNameœ:œfinancialAndAttachmentsœ,œidœ:œPrompt-d5caQœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-nvcHK",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "financialAndAttachments",
            "id": "Prompt-d5caQ",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Prompt-xn1W9",
        "target": "PromptInvocator-Z0j15",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-xn1W9œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œbody_to_appendœ,œidœ:œPromptInvocator-Z0j15œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Prompt-xn1W9{œdataTypeœ:œPromptœ,œidœ:œPrompt-xn1W9œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-PromptInvocator-Z0j15{œfieldNameœ:œbody_to_appendœ,œidœ:œPromptInvocator-Z0j15œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-xn1W9",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "body_to_append",
            "id": "PromptInvocator-Z0j15",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PromptInvocator-Z0j15",
        "target": "SimpleAPIRequest-avmVS",
        "sourceHandle": "{œdataTypeœ:œPromptInvocatorœ,œidœ:œPromptInvocator-Z0j15œ,œnameœ:œinvocation_outputœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-avmVSœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-PromptInvocator-Z0j15{œdataTypeœ:œPromptInvocatorœ,œidœ:œPromptInvocator-Z0j15œ,œnameœ:œinvocation_outputœ,œoutput_typesœ:[œDataœ]}-SimpleAPIRequest-avmVS{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-avmVSœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "PromptInvocator",
            "id": "PromptInvocator-Z0j15",
            "name": "invocation_output",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "body_data",
            "id": "SimpleAPIRequest-avmVS",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PromptInvocator-ZptAE",
        "target": "Prompt-xn1W9",
        "sourceHandle": "{œdataTypeœ:œPromptInvocatorœ,œidœ:œPromptInvocator-ZptAEœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œdiversificationScoreœ,œidœ:œPrompt-xn1W9œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-PromptInvocator-ZptAE{œdataTypeœ:œPromptInvocatorœ,œidœ:œPromptInvocator-ZptAEœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-xn1W9{œfieldNameœ:œdiversificationScoreœ,œidœ:œPrompt-xn1W9œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "PromptInvocator",
            "id": "PromptInvocator-ZptAE",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "diversificationScore",
            "id": "Prompt-xn1W9",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ConditionalRouter-rMIOx",
        "target": "PromptInvocator-ZptAE",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-rMIOxœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œbody_to_appendœ,œidœ:œPromptInvocator-ZptAEœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ConditionalRouter-rMIOx{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-rMIOxœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}-PromptInvocator-ZptAE{œfieldNameœ:œbody_to_appendœ,œidœ:œPromptInvocator-ZptAEœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-rMIOx",
            "name": "true_result",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "body_to_append",
            "id": "PromptInvocator-ZptAE",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PromptInvocator-JFlLk",
        "target": "Prompt-xn1W9",
        "sourceHandle": "{œdataTypeœ:œPromptInvocatorœ,œidœ:œPromptInvocator-JFlLkœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œleaseExpirationsœ,œidœ:œPrompt-xn1W9œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-PromptInvocator-JFlLk{œdataTypeœ:œPromptInvocatorœ,œidœ:œPromptInvocator-JFlLkœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-xn1W9{œfieldNameœ:œleaseExpirationsœ,œidœ:œPrompt-xn1W9œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "PromptInvocator",
            "id": "PromptInvocator-JFlLk",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "leaseExpirations",
            "id": "Prompt-xn1W9",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ConditionalRouter-rMIOx",
        "target": "PromptInvocator-JFlLk",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-rMIOxœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œbody_to_appendœ,œidœ:œPromptInvocator-JFlLkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ConditionalRouter-rMIOx{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-rMIOxœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}-PromptInvocator-JFlLk{œfieldNameœ:œbody_to_appendœ,œidœ:œPromptInvocator-JFlLkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-rMIOx",
            "name": "true_result",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "body_to_append",
            "id": "PromptInvocator-JFlLk",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Prompt-d5caQ",
        "target": "PromptInvocator-f6mwK",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-d5caQœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œbody_to_appendœ,œidœ:œPromptInvocator-f6mwKœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Prompt-d5caQ{œdataTypeœ:œPromptœ,œidœ:œPrompt-d5caQœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-PromptInvocator-f6mwK{œfieldNameœ:œbody_to_appendœ,œidœ:œPromptInvocator-f6mwKœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-d5caQ",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "body_to_append",
            "id": "PromptInvocator-f6mwK",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PromptInvocator-f6mwK",
        "target": "SimpleAPIRequest-Ib5fm",
        "sourceHandle": "{œdataTypeœ:œPromptInvocatorœ,œidœ:œPromptInvocator-f6mwKœ,œnameœ:œinvocation_outputœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-Ib5fmœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-PromptInvocator-f6mwK{œdataTypeœ:œPromptInvocatorœ,œidœ:œPromptInvocator-f6mwKœ,œnameœ:œinvocation_outputœ,œoutput_typesœ:[œDataœ]}-SimpleAPIRequest-Ib5fm{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-Ib5fmœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "PromptInvocator",
            "id": "PromptInvocator-f6mwK",
            "name": "invocation_output",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "body_data",
            "id": "SimpleAPIRequest-Ib5fm",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-YxS5j",
        "target": "Prompt-d5caQ",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-YxS5jœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œmetricsValuesœ,œidœ:œPrompt-d5caQœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-YxS5j{œdataTypeœ:œParseDataœ,œidœ:œParseData-YxS5jœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-d5caQ{œfieldNameœ:œmetricsValuesœ,œidœ:œPrompt-d5caQœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-YxS5j",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "metricsValues",
            "id": "Prompt-d5caQ",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PromptInvocator-Z0j15",
        "target": "ParseData-YxS5j",
        "sourceHandle": "{œdataTypeœ:œPromptInvocatorœ,œidœ:œPromptInvocator-Z0j15œ,œnameœ:œinvocation_outputœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-YxS5jœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-PromptInvocator-Z0j15{œdataTypeœ:œPromptInvocatorœ,œidœ:œPromptInvocator-Z0j15œ,œnameœ:œinvocation_outputœ,œoutput_typesœ:[œDataœ]}-ParseData-YxS5j{œfieldNameœ:œdataœ,œidœ:œParseData-YxS5jœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "PromptInvocator",
            "id": "PromptInvocator-Z0j15",
            "name": "invocation_output",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-YxS5j",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PromptInvocator-f6mwK",
        "target": "ChatOutput-UfSPo",
        "sourceHandle": "{œdataTypeœ:œPromptInvocatorœ,œidœ:œPromptInvocator-f6mwKœ,œnameœ:œinvocation_outputœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-UfSPoœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-PromptInvocator-f6mwK{œdataTypeœ:œPromptInvocatorœ,œidœ:œPromptInvocator-f6mwKœ,œnameœ:œinvocation_outputœ,œoutput_typesœ:[œDataœ]}-ChatOutput-UfSPo{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-UfSPoœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "PromptInvocator",
            "id": "PromptInvocator-f6mwK",
            "name": "invocation_output",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-UfSPo",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PromptInvocator-Z0j15",
        "target": "ChatOutput-s5NbK",
        "sourceHandle": "{œdataTypeœ:œPromptInvocatorœ,œidœ:œPromptInvocator-Z0j15œ,œnameœ:œinvocation_outputœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-s5NbKœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-PromptInvocator-Z0j15{œdataTypeœ:œPromptInvocatorœ,œidœ:œPromptInvocator-Z0j15œ,œnameœ:œinvocation_outputœ,œoutput_typesœ:[œDataœ]}-ChatOutput-s5NbK{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-s5NbKœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "PromptInvocator",
            "id": "PromptInvocator-Z0j15",
            "name": "invocation_output",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-s5NbK",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Custom Webhook-HE2rv",
        "target": "Sec10QDataExtractor-BHvBs",
        "sourceHandle": "{œdataTypeœ:œCustom Webhookœ,œidœ:œCustom Webhook-HE2rvœ,œnameœ:œcriterionKeyœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œcriterion_keyœ,œidœ:œSec10QDataExtractor-BHvBsœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Custom Webhook-HE2rv{œdataTypeœ:œCustom Webhookœ,œidœ:œCustom Webhook-HE2rvœ,œnameœ:œcriterionKeyœ,œoutput_typesœ:[œMessageœ]}-Sec10QDataExtractor-BHvBs{œfieldNameœ:œcriterion_keyœ,œidœ:œSec10QDataExtractor-BHvBsœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Custom Webhook",
            "id": "Custom Webhook-HE2rv",
            "name": "criterionKey",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "criterion_key",
            "id": "Sec10QDataExtractor-BHvBs",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Custom Webhook-HE2rv",
        "target": "Sec10QDataExtractor-TWjZJ",
        "sourceHandle": "{œdataTypeœ:œCustom Webhookœ,œidœ:œCustom Webhook-HE2rvœ,œnameœ:œtickerœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œtickerœ,œidœ:œSec10QDataExtractor-TWjZJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Custom Webhook-HE2rv{œdataTypeœ:œCustom Webhookœ,œidœ:œCustom Webhook-HE2rvœ,œnameœ:œtickerœ,œoutput_typesœ:[œMessageœ]}-Sec10QDataExtractor-TWjZJ{œfieldNameœ:œtickerœ,œidœ:œSec10QDataExtractor-TWjZJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Custom Webhook",
            "id": "Custom Webhook-HE2rv",
            "name": "ticker",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "ticker",
            "id": "Sec10QDataExtractor-TWjZJ",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Custom Webhook-HE2rv",
        "target": "Sec10QDataExtractor-BHvBs",
        "sourceHandle": "{œdataTypeœ:œCustom Webhookœ,œidœ:œCustom Webhook-HE2rvœ,œnameœ:œtickerœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œtickerœ,œidœ:œSec10QDataExtractor-BHvBsœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Custom Webhook-HE2rv{œdataTypeœ:œCustom Webhookœ,œidœ:œCustom Webhook-HE2rvœ,œnameœ:œtickerœ,œoutput_typesœ:[œMessageœ]}-Sec10QDataExtractor-BHvBs{œfieldNameœ:œtickerœ,œidœ:œSec10QDataExtractor-BHvBsœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Custom Webhook",
            "id": "Custom Webhook-HE2rv",
            "name": "ticker",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "ticker",
            "id": "Sec10QDataExtractor-BHvBs",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Custom Webhook-HE2rv",
        "target": "ConditionalRouter-rMIOx",
        "sourceHandle": "{œdataTypeœ:œCustom Webhookœ,œidœ:œCustom Webhook-HE2rvœ,œnameœ:œreportKeyœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_textœ,œidœ:œConditionalRouter-rMIOxœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Custom Webhook-HE2rv{œdataTypeœ:œCustom Webhookœ,œidœ:œCustom Webhook-HE2rvœ,œnameœ:œreportKeyœ,œoutput_typesœ:[œMessageœ]}-ConditionalRouter-rMIOx{œfieldNameœ:œinput_textœ,œidœ:œConditionalRouter-rMIOxœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Custom Webhook",
            "id": "Custom Webhook-HE2rv",
            "name": "reportKey",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_text",
            "id": "ConditionalRouter-rMIOx",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Custom Webhook-HE2rv",
        "target": "PromptInvocator-Z0j15",
        "sourceHandle": "{œdataTypeœ:œCustom Webhookœ,œidœ:œCustom Webhook-HE2rvœ,œnameœ:œoutput_dataœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œinput_jsonœ,œidœ:œPromptInvocator-Z0j15œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-Custom Webhook-HE2rv{œdataTypeœ:œCustom Webhookœ,œidœ:œCustom Webhook-HE2rvœ,œnameœ:œoutput_dataœ,œoutput_typesœ:[œDataœ]}-PromptInvocator-Z0j15{œfieldNameœ:œinput_jsonœ,œidœ:œPromptInvocator-Z0j15œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Custom Webhook",
            "id": "Custom Webhook-HE2rv",
            "name": "output_data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "input_json",
            "id": "PromptInvocator-Z0j15",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Custom Webhook-HE2rv",
        "target": "PromptInvocator-f6mwK",
        "sourceHandle": "{œdataTypeœ:œCustom Webhookœ,œidœ:œCustom Webhook-HE2rvœ,œnameœ:œoutput_dataœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œinput_jsonœ,œidœ:œPromptInvocator-f6mwKœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-Custom Webhook-HE2rv{œdataTypeœ:œCustom Webhookœ,œidœ:œCustom Webhook-HE2rvœ,œnameœ:œoutput_dataœ,œoutput_typesœ:[œDataœ]}-PromptInvocator-f6mwK{œfieldNameœ:œinput_jsonœ,œidœ:œPromptInvocator-f6mwKœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Custom Webhook",
            "id": "Custom Webhook-HE2rv",
            "name": "output_data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "input_json",
            "id": "PromptInvocator-f6mwK",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ConditionalRouter-rMIOx",
        "target": "PromptInvocator-GzIho",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-rMIOxœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œbody_to_appendœ,œidœ:œPromptInvocator-GzIhoœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ConditionalRouter-rMIOx{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-rMIOxœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}-PromptInvocator-GzIho{œfieldNameœ:œbody_to_appendœ,œidœ:œPromptInvocator-GzIhoœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-rMIOx",
            "name": "true_result",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "body_to_append",
            "id": "PromptInvocator-GzIho",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PromptInvocator-GzIho",
        "target": "Prompt-xn1W9",
        "sourceHandle": "{œdataTypeœ:œPromptInvocatorœ,œidœ:œPromptInvocator-GzIhoœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œtenant_quality_scoreœ,œidœ:œPrompt-xn1W9œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-PromptInvocator-GzIho{œdataTypeœ:œPromptInvocatorœ,œidœ:œPromptInvocator-GzIhoœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-xn1W9{œfieldNameœ:œtenant_quality_scoreœ,œidœ:œPrompt-xn1W9œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "PromptInvocator",
            "id": "PromptInvocator-GzIho",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "tenant_quality_score",
            "id": "Prompt-xn1W9",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ConditionalRouter-rMIOx",
        "target": "PromptInvocator-5PFMX",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-rMIOxœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œbody_to_appendœ,œidœ:œPromptInvocator-5PFMXœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ConditionalRouter-rMIOx{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-rMIOxœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}-PromptInvocator-5PFMX{œfieldNameœ:œbody_to_appendœ,œidœ:œPromptInvocator-5PFMXœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-rMIOx",
            "name": "true_result",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "body_to_append",
            "id": "PromptInvocator-5PFMX",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PromptInvocator-5PFMX",
        "target": "Prompt-xn1W9",
        "sourceHandle": "{œdataTypeœ:œPromptInvocatorœ,œidœ:œPromptInvocator-5PFMXœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œoccupancy_rateœ,œidœ:œPrompt-xn1W9œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-PromptInvocator-5PFMX{œdataTypeœ:œPromptInvocatorœ,œidœ:œPromptInvocator-5PFMXœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-xn1W9{œfieldNameœ:œoccupancy_rateœ,œidœ:œPrompt-xn1W9œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "PromptInvocator",
            "id": "PromptInvocator-5PFMX",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "occupancy_rate",
            "id": "Prompt-xn1W9",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      }
    ],
    "viewport": {
      "x": 121.53540580528198,
      "y": 23.320998329590395,
      "zoom": 0.15650306742324388
    }
  }
}