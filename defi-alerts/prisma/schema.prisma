// schema.prisma

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DeliveryChannelType {
  EMAIL
  WEBHOOK
}

enum SeverityLevel {
  NONE
  LOW
  MEDIUM
  HIGH
}

enum NotificationFrequency {
  ONCE_PER_ALERT
  AT_MOST_ONCE_PER_3_HOURS
  AT_MOST_ONCE_PER_6_HOURS
  AT_MOST_ONCE_PER_12_HOURS
  AT_MOST_ONCE_PER_DAY
  AT_MOST_ONCE_PER_WEEK
}

enum AlertCategory {
  GENERAL
  PERSONALIZED
}

enum AlertActionType {
  SUPPLY
  BORROW
}

enum ConditionType {
  APR_RISE_ABOVE
  APR_FALLS_BELOW
  APR_OUTSIDE_RANGE
  RATE_DIFF_ABOVE
  RATE_DIFF_BELOW
}

enum AlertStatus {
  ACTIVE
  PAUSED
}

model CryptoLoginNonce {
  userId  String   @unique @map("user_id")
  nonce   String
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("crypto_login_nonce")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  publicAddress String?   @map("public_address")
  phoneNumber   String?   @map("phone_number")
  walletAddress String[]  @default([]) @map("wallet_address")

  spaceId      String @map("space_id")
  username     String @map("username")
  authProvider String @map("auth_provider")

  accounts         Account[]
  sessions         Session[]
  cryptoLoginNonce CryptoLoginNonce?
  Alert            Alert[]

  @@unique([publicAddress, spaceId])
  @@unique([username, spaceId])
  @@unique([email, spaceId])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Space {
  id               String   @id @db.VarChar(64)
  verified         Boolean  @default(false)
  createdAt        DateTime @default(now()) @map("created_at")
  creator          String   @db.VarChar(64)
  name             String   @db.VarChar(255)
  updatedAt        DateTime @updatedAt @map("updated_at")
  avatar           String?  @db.VarChar(255)
  /// [UsernameAndName]
  adminUsernamesV1 Json[]   @map("admin_usernames_v1") @db.JsonB
  domains          String[] @default([])
  /// [AuthSettings]
  authSettings     Json     @default("{}") @map("auth_settings") @db.Json
  features         String[]

  /// [ThemeColors]
  themeColors Json? @map("theme_colors") @db.Json

  @@map("spaces")
}

model Chain {
  chainId      Int                       @id @map("chain_id")
  name         String
  assets       Asset[]
  alerts       Alert[]                   @relation("AlertChains")
  lendingRates LendingAndBorrowingRate[]

  @@map("chains")
}

model Asset {
  chainId_address String                    @id @map("chain_id_address")
  chainId         Int                       @map("chain_id")
  chain           Chain                     @relation(fields: [chainId], references: [chainId])
  symbol          String                    @map("symbol")
  address         String                    @map("address")
  alerts          Alert[]                   @relation("AlertAssets")
  lendingRates    LendingAndBorrowingRate[]

  @@map("assets")
}

model Alert {
  id                    String                @id @default(cuid())
  user                  User?                 @relation(fields: [userId], references: [id])
  userId                String?               @map("user_id")
  category              AlertCategory         @map("category")
  actionType            AlertActionType       @map("action_type")
  isComparison          Boolean               @default(false) @map("is_comparison")
  walletAddress         String?               @map("wallet_address")
  marketId              String?               @map("market_id")
  selectedChains        Chain[]               @relation("AlertChains")
  selectedAssets        Asset[]               @relation("AlertAssets")
  compareProtocols      String[]              @map("compare_protocols")
  notificationFrequency NotificationFrequency @map("notification_frequency")
  conditions            AlertCondition[]
  status                AlertStatus           @default(ACTIVE) @map("status")
  deliveryChannels      DeliveryChannel[]
  createdAt             DateTime              @default(now()) @map("created_at")
  updatedAt             DateTime              @updatedAt @map("updated_at")
  AlertNotification     AlertNotification[]

  @@map("alerts")
}

model AlertCondition {
  id                 String        @id @default(cuid())
  alert              Alert         @relation(fields: [alertId], references: [id])
  alertId            String        @map("alert_id")
  conditionType      ConditionType @map("condition_type")
  thresholdValue     Float?        @map("threshold_value")
  thresholdValueLow  Float?        @map("threshold_value_low")
  thresholdValueHigh Float?        @map("threshold_value_high")
  severity           SeverityLevel @map("severity")

  @@map("alert_conditions")
}

model DeliveryChannel {
  id          String              @id @default(cuid())
  alert       Alert               @relation(fields: [alertId], references: [id])
  alertId     String              @map("alert_id")
  channelType DeliveryChannelType @map("channel_type")
  email       String?             @map("email")
  webhookUrl  String?             @map("webhook_url")

  @@map("delivery_channels")
}

model LendingAndBorrowingRate {
  id                   String   @id @default(cuid())
  protocolName         String   @map("protocol_name")
  chain                Chain    @relation(fields: [chainId], references: [chainId])
  chainId              Int      @map("chain_id")
  assetChainId_address String   @map("asset_chain_id_address")
  asset                Asset    @relation(fields: [assetChainId_address], references: [chainId_address])
  netEarnAPY           Float    @map("net_earn_apy")
  netBorrowAPY         Float    @map("net_borrow_apy")
  recordedAt           DateTime @default(now()) @map("recorded_at")

  @@map("lending_and_borrowing_rates")
}

model AlertNotification {
  id                String            @id @default(cuid())
  alert             Alert             @relation(fields: [alertId], references: [id])
  alertId           String            @map("alert_id")
  alertConditionIds String[]          @map("alert_condition_ids")
  /// [AlertTriggerValues]
  triggeredValues   Json?             @map("triggered_values") @db.JsonB
  SentNotification  SentNotification?

  @@map("alert_notifications")
}

// add one more field here on top model
// matchedConditionIds String[]
// we can see to change it later to show history if we want to

model SentNotification {
  id                  String            @id @default(cuid())
  alertNotificationId String            @unique @map("alert_notification_id")
  alertNotification   AlertNotification @relation(fields: [alertNotificationId], references: [id])
  sentAt              DateTime          @default(now()) @map("sent_at")

  @@map("sent_notifications")
}
