// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DeliveryChannelType {
  EMAIL
  WEBHOOK
}

enum SeverityLevel {
  NONE
  LOW
  MEDIUM
  HIGH
}

enum NotificationFrequency {
  IMMEDIATE
  AT_MOST_ONCE_PER_6_HOURS
  AT_MOST_ONCE_PER_12_HOURS
  AT_MOST_ONCE_PER_DAY
}

enum AlertCategory {
  GENERAL
  PERSONALIZED
}

enum AlertActionType {
  SUPPLY
  BORROW
}

enum ConditionType {
  APR_RISE_ABOVE
  APR_FALLS_BELOW
  APR_OUTSIDE_RANGE
  RATE_DIFF_ABOVE
  RATE_DIFF_BELOW
}

enum AlertStatus {
  ACTIVE
  PAUSED
}

model User {
  id     String  @id @default(cuid())
  email  String? @unique
  alerts Alert[]
}

model Alert {
  id                    String                @id @default(cuid())
  user                  User?                 @relation(fields: [userId], references: [id])
  userId                String?
  category              AlertCategory
  actionType            AlertActionType
  isComparison          Boolean               @default(false)
  walletAddress         String?
  selectedChains        String[]
  selectedMarkets       String[]
  compareProtocols      String[]
  notificationFrequency NotificationFrequency
  conditions            AlertCondition[]
  status                AlertStatus           @default(ACTIVE)
  deliveryChannels      DeliveryChannel[]
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}

model AlertCondition {
  id                 String        @id @default(cuid())
  alert              Alert         @relation(fields: [alertId], references: [id])
  alertId            String
  conditionType      ConditionType
  thresholdValue     Float?
  thresholdValueLow  Float?
  thresholdValueHigh Float?
  severity           SeverityLevel
}

model DeliveryChannel {
  id          String              @id @default(cuid())
  alert       Alert               @relation(fields: [alertId], references: [id])
  alertId     String
  channelType DeliveryChannelType
  email       String?
  webhookUrl  String?
}
