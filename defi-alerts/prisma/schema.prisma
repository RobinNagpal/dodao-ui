// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DeliveryChannelType {
  EMAIL
  WEBHOOK
}

enum SeverityLevel {
  NONE
  LOW
  MEDIUM
  HIGH
}

enum NotificationFrequency {
  ONCE_PER_ALERT
  AT_MOST_ONCE_PER_3_HOURS
  AT_MOST_ONCE_PER_6_HOURS
  AT_MOST_ONCE_PER_12_HOURS
  AT_MOST_ONCE_PER_DAY
  AT_MOST_ONCE_PER_WEEK
}

enum AlertCategory {
  GENERAL
  PERSONALIZED
}

enum AlertActionType {
  SUPPLY
  BORROW
}

enum ConditionType {
  APR_RISE_ABOVE
  APR_FALLS_BELOW
  APR_OUTSIDE_RANGE
  RATE_DIFF_ABOVE
  RATE_DIFF_BELOW
}

enum AlertStatus {
  ACTIVE
  PAUSED
}

model User {
  id     String  @id @default(cuid())
  email  String? @unique
  alerts Alert[]
}

model Chain {
  chainId      Int                       @id
  name         String
  assets       Asset[]
  alerts       Alert[]                   @relation("AlertChains")
  lendingRates LendingAndBorrowingRate[]
}

model Asset {
  chainId_address String                    @id
  chainId         Int
  chain           Chain                     @relation(fields: [chainId], references: [chainId])
  symbol          String
  address         String
  alerts          Alert[]                   @relation("AlertAssets")
  lendingRates    LendingAndBorrowingRate[]
}

model Alert {
  id                    String                @id @default(cuid())
  user                  User?                 @relation(fields: [userId], references: [id])
  userId                String?
  category              AlertCategory
  actionType            AlertActionType
  isComparison          Boolean               @default(false)
  walletAddress         String?
  selectedChains        Chain[]               @relation("AlertChains")
  selectedAssets        Asset[]               @relation("AlertAssets")
  compareProtocols      String[]
  notificationFrequency NotificationFrequency
  conditions            AlertCondition[]
  status                AlertStatus           @default(ACTIVE)
  deliveryChannels      DeliveryChannel[]
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}

model AlertCondition {
  id                 String        @id @default(cuid())
  alert              Alert         @relation(fields: [alertId], references: [id])
  alertId            String
  conditionType      ConditionType
  thresholdValue     Float?
  thresholdValueLow  Float?
  thresholdValueHigh Float?
  severity           SeverityLevel
}

model DeliveryChannel {
  id          String              @id @default(cuid())
  alert       Alert               @relation(fields: [alertId], references: [id])
  alertId     String
  channelType DeliveryChannelType
  email       String?
  webhookUrl  String?
}

model LendingAndBorrowingRate {
  id                   String   @id @default(cuid())
  protocolName         String
  chain                Chain    @relation(fields: [chainId], references: [chainId])
  chainId              Int
  assetChainId_address String
  asset                Asset    @relation(fields: [assetChainId_address], references: [chainId_address])
  netEarnAPY           Float
  netBorrowAPY         Float
  recordedAt           DateTime @default(now())
}

model AlertNotification {
  id                String            @id @default(cuid())
  alertId           String
  alertConditionIds String[]
  SentNotification  SentNotification?
}

model SentNotification {
  id                  String            @id @default(cuid())
  alertNotificationId String            @unique
  alertNotification   AlertNotification @relation(fields: [alertNotificationId], references: [id])
  sentAt              DateTime          @default(now())
}
