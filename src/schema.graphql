schema {
  query: Query
  mutation: Mutation
}

type AcademyTask {
  createdAt: Int!
  createdBy: String!
  details: String!
  excerpt: String!
  items: [GuideStepItem!]!
  prerequisiteCourses: [SummarizedGitCourse!]!
  prerequisiteGuides: [Guide!]!
  spaceId: String!
  status: String!
  title: String!
  updatedAt: Int!
  updatedBy: String!
  uuid: String!
}

input AddTopicExplanationInput {
  courseKey: String!
  details: String!
  shortTitle: String!
  title: String!
  topicKey: String!
}

input AddTopicInput {
  courseKey: String!
  details: String!
  title: String!
}

input AddTopicQuestionInput {
  answerKeys: [String!]!
  choices: [TopicQuestionChoiceInput!]!
  content: String!
  courseKey: String!
  explanation: String!
  hint: String!
  questionType: String!
  topicKey: String!
}

input AddTopicQuestionsInput {
  courseKey: String!
  questions: [AddTopicQuestionInput!]!
  topicKey: String!
}

input AddTopicSummaryInput {
  courseKey: String!
  details: String!
  shortTitle: String!
  title: String!
  topicKey: String!
}

input AddTopicVideoInput {
  courseKey: String!
  details: String!
  shortTitle: String!
  title: String!
  topicKey: String!
  url: String!
}

input AnnotateDiscoursePostInput {
  categories: [String!]!
  discussed: Boolean
  enacted: Boolean
  postId: String!
  spaceId: String!
  subCategories: [String!]!
}

scalar Any

type ArticleIndexingInfo {
  articleUrl: String!
  createdAt: DateTimeISO!
  id: String!
  spaceId: String!
  status: String!
  text: String
  textLength: Int
  updatedAt: DateTimeISO!
}

type AuthSettings {
  enableLogin: Boolean
  loginOptions: [String!]
}

input AuthSettingsInput {
  enableLogin: Boolean!
  loginOptions: [String!]!
}

type Byte {
  admins: [String!]!
  content: String!
  created: String!
  id: String!
  name: String!
  postSubmissionStepContent: String
  priority: Int!
  publishStatus: String!
  showIncorrectOnCompletion: Boolean!
  steps: [ByteStep!]!
  tags: [String!]!
  visibility: String
}

type ByteCollection {
  byteIds: [String!]!
  bytes: [ByteCollectionByte!]!
  description: String!
  id: ID!
  name: String!
  order: Int!
  status: String!
}

type ByteCollectionByte {
  byteId: String!
  content: String!
  name: String!
}

type ByteLinkedinPdfContent {
  excerpt: String!
  steps: [ByteLinkedinPdfContentStep!]!
  title: String!
}

input ByteLinkedinPdfContentInput {
  excerpt: String!
  steps: [ByteLinkedinPdfContentStepInput!]!
  title: String!
}

type ByteLinkedinPdfContentStep {
  content: String!
  name: String!
}

input ByteLinkedinPdfContentStepInput {
  content: String!
  name: String!
}

type ByteQuestion {
  answerKeys: [String!]!
  choices: [QuestionChoice!]!
  content: String!
  explanation: String!
  type: String!
  uuid: String!
}

type ByteSettings {
  askForLoginToSubmit: Boolean
  captureBeforeAndAfterRating: Boolean @deprecated(reason: "Use captureRating instead")
  captureRating: Boolean
  showCategoriesInSidebar: Boolean
}

input ByteSettingsInput {
  askForLoginToSubmit: Boolean
  captureRating: Boolean
  showCategoriesInSidebar: Boolean
}

type ByteSocialShare {
  byteId: String!
  linkedInImages: [String!]
  linkedInPdf: String
  linkedinPdfContent: ByteLinkedinPdfContent
  spaceId: String!
  twitterImage: String
  uuid: String!
}

type ByteStep {
  content: String!
  name: String!
  stepItems: [ByteStepItem!]!
  uuid: String!
}

input ByteStepInput {
  content: String!
  name: String!
  stepItems: [StepItemInputGenericInput!]!
  uuid: String!
}

union ByteStepItem = ByteQuestion | ByteUserInput | UserDiscordConnect

type ByteSubmission {
  byteId: String!
  created: String!
  createdBy: String!
  id: String!
  spaceId: String!
}

input ByteSubmissionInput {
  byteId: String!
  from: String!
  space: String!
  timestamp: String
  uuid: String!
}

type ByteUserInput {
  label: String!
  required: Boolean!
  type: String!
  uuid: String!
}

input ChatCompletionAIInput {
  messages: [OpenAIChatMessageInput!]!
  model: String
  n: Int
  temperature: Float
}

enum ChatCompletionRequestMessageRoleEnum {
  assistant
  system
  user
}

type ChatbotCategory {
  description: String!
  id: String!
  key: String!
  name: String!
  priority: Int!
  subCategories: [ChatbotSubcategory!]!
}

type ChatbotFAQ implements ChatbotFAQCommon {
  answer: String!
  categories: [String!]
  id: String!
  priority: Int!
  question: String!
  spaceId: String!
  subCategories: [String!]
  url: String!
}

interface ChatbotFAQCommon {
  answer: String!
  categories: [String!]
  id: String!
  priority: Int!
  question: String!
  spaceId: String!
  subCategories: [String!]
  url: String!
}

type ChatbotSubcategory {
  description: String!
  key: String!
  name: String!
}

type ChatbotUserQuestion {
  categories: [String!]
  id: String!
  question: String!
  spaceId: String!
  subCategories: [String!]
}

input CompletionAIInput {
  model: String
  n: Int
  prompt: String!
  temperature: Float
}

type ConsolidatedGuideRating {
  avgRating: Float!
  endRatingFeedbackCount: Int!
  negativeFeedbackCount: Int!
  negativeRatingDistribution: RatingDistribution!
  positiveFeedbackCount: Int!
  positiveRatingDistribution: RatingDistribution!
}

input CourseBasicInfoInput {
  courseAdmins: [String!]!
  courseFailContent: String
  coursePassContent: String
  coursePassCount: Int
  details: String!
  duration: String!
  highlights: [String!]!
  key: String!
  priority: Int
  publishStatus: String!
  summary: String!
  thumbnail: String!
  title: String!
  topicConfig: TopicConfigInput
}

type CourseIntegrations {
  discordRoleIds: [String!]
  discordRolePassingCount: Int
  discordWebhook: String
  projectGalaxyCredentialId: String
  projectGalaxyOatMintUrl: String
  projectGalaxyOatMintedContent: String
  projectGalaxyOatPassingCount: Int
}

type CourseReadingQuestion {
  answerKeys: [String!]!
  choices: [GitCourseQuestionChoice!]!
  content: String!
  explanation: String!
  hint: String!
  timeInSec: Int!
  type: String!
  uuid: String!
}

input CourseSubmissionInput {
  courseKey: String!
  uuid: String!
}

input CreateByteCollectionInput {
  byteIds: [String!]!
  description: String!
  name: String!
  order: Int!
  spaceId: String!
  status: String!
}

type CreateCompletionResponseChoice {
  finish_reason: String
  index: Int
  logprobs: OpenAIChoiceLogprobs
  text: String
}

input CreateSignedUrlInput {
  contentType: String!
  imageType: String!
  name: String!
  objectId: String!
}

input DateTimeFilter {
  after: DateTimeISO
  before: DateTimeISO
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DeleteTopicExplanationInput {
  courseKey: String!
  explanationKey: String!
  topicKey: String!
}

input DeleteTopicInput {
  courseKey: String!
  topicKey: String!
}

input DeleteTopicQuestionInput {
  courseKey: String!
  questionUuid: String!
  topicKey: String!
}

input DeleteTopicSummaryInput {
  courseKey: String!
  summaryKey: String!
  topicKey: String!
}

input DeleteTopicVideoInput {
  courseKey: String!
  topicKey: String!
  videoUuid: String!
}

type DiscordChannel {
  createdAt: DateTimeISO!
  discordChannelId: String!
  id: String!
  name: String!
  serverId: String!
  shouldIndex: Boolean!
  status: String!
  type: String!
  updatedAt: DateTimeISO!
}

type DiscordMessage {
  authorUsername: String!
  channelId: String!
  content: String!
  createdAt: DateTimeISO!
  discordMessageId: String!
  id: String!
  messageDate: DateTimeISO!
  serverId: String!
  updatedAt: DateTimeISO!
}

type DiscordServer {
  createdAt: DateTimeISO!
  discordServerId: String!
  iconUrl: String
  id: String!
  name: String!
  updatedAt: DateTimeISO!
}

type DiscourseIndexRun {
  createdAt: DateTimeISO!
  id: String!
  runDate: DateTimeISO
  spaceId: String!
  status: String!
}

type DiscoursePost {
  aiSummary: String
  aiSummaryDate: DateTimeISO
  author: String
  categories: [String!]!
  createdAt: DateTimeISO!
  datePublished: DateTimeISO!
  discussed: Boolean
  enacted: Boolean
  fullContent: String
  id: String!
  indexedAt: DateTimeISO
  spaceId: String!
  status: String!
  subCategories: [String!]!
  title: String!
  url: String!
}

type DiscoursePostComment {
  author: String!
  commentPostId: String!
  content: String!
  createdAt: DateTimeISO!
  datePublished: DateTimeISO!
  id: String!
  indexedAt: DateTimeISO!
  postId: String!
  spaceId: String!
}

type DownloadAndCleanContentResponse {
  content: String!
  links: [DownloadLinkInfo!]!
}

type DownloadLinkInfo {
  downloadStatus: String!
  link: String!
  tokenCount: Int!
}

input ExtractRelevantTextForTopicInput {
  content: String!
  topic: String!
}

input GenerateImageEditInput {
  editImageUrl: String!
  prompt: String!
}

input GenerateImageInput {
  prompt: String!
}

type GenerateImageResponse {
  url: String!
}

type GenericCourse {
  categories: [String!]!
  content: String!
  courseAdmins: [String!]
  courseType: String!
  duration: String!
  excerpt: String!
  highlights: [String!]!
  id: String!
  name: String!
  priority: Int
  publishStatus: String!
  thumbnail: String!
  uuid: String!
}

type GitCourse {
  courseAdmins: [String!]
  courseFailContent: String
  coursePassContent: String
  coursePassCount: Int
  details: String!
  duration: String!
  highlights: [String!]!
  key: String!
  priority: Int
  publishStatus: String!
  summary: String!
  thumbnail: String!
  title: String!
  topicConfig: TopicConfig
  topics: [GitCourseTopic!]!
}

type GitCourseExplanation {
  details: String!
  key: String!
  shortTitle: String!
  title: String!
}

type GitCourseExplanationsSubmission {
  key: String!
  status: String!
}

input GitCourseExplanationsSubmissionInput {
  key: String!
  status: String!
}

input GitCourseInput {
  courseRepoUrl: String!
  publishStatus: String!
  weight: Int!
}

type GitCourseQuestion {
  answerKeys: [String!]!
  choices: [GitCourseQuestionChoice!]!
  content: String!
  explanation: String!
  hint: String!
  type: String!
  uuid: String!
}

type GitCourseQuestionChoice {
  content: String!
  key: String!
}

type GitCourseQuestionsSubmission {
  answers: [String!]!
  status: String!
  uuid: String!
}

input GitCourseQuestionsSubmissionInput {
  answers: [String!]!
  status: String!
  uuid: String!
}

type GitCourseReading {
  details: String!
  questions: [CourseReadingQuestion!]
  shortTitle: String!
  title: String!
  type: String!
  url: String!
  uuid: String!
}

type GitCourseReadingsSubmission {
  questions: [GitCourseQuestionsSubmission!]
  status: String!
  uuid: String!
}

input GitCourseReadingsSubmissionInput {
  questions: [GitCourseQuestionsSubmissionInput!]!
  status: String!
  uuid: String!
}

type GitCourseSubmission {
  courseKey: String!
  createdAt: String!
  createdBy: String!
  galaxyCredentialsUpdated: Boolean
  isLatestSubmission: Boolean
  questionsAttempted: Int
  questionsCorrect: Int
  questionsIncorrect: Int
  questionsSkipped: Int
  spaceId: String!
  status: String!
  topicSubmissions: [GitCourseTopicSubmission!]!
  updatedAt: DateTimeISO!
  uuid: String!
}

type GitCourseSummariesSubmission {
  key: String!
  status: String!
}

input GitCourseSummariesSubmissionInput {
  key: String!
  status: String!
}

type GitCourseSummary {
  details: String!
  key: String!
  shortTitle: String!
  title: String!
}

type GitCourseTopic {
  details: String!
  explanations: [GitCourseExplanation!]!
  key: String!
  questions: [GitCourseQuestion!]!
  readings: [GitCourseReading!]!
  summaries: [GitCourseSummary!]!
  title: String!
}

type GitCourseTopicCorrectAnswer {
  answerKeys: [String!]!
  uuid: String!
}

type GitCourseTopicSubmission {
  correctAnswers: [GitCourseTopicCorrectAnswer!]
  courseKey: String!
  courseSubmissionUuid: String!
  createdAt: DateTimeISO!
  createdBy: String!
  isLatestSubmission: Boolean!
  questionsAttempted: Int
  questionsCorrect: Int
  questionsIncorrect: Int
  questionsSkipped: Int
  spaceId: String!
  status: String!
  submission: GitCourseTopicSubmissionJson
  topicKey: String!
  updatedAt: DateTimeISO!
  uuid: String!
}

input GitCourseTopicSubmissionInput {
  courseKey: String!
  explanations: [GitCourseExplanationsSubmissionInput!]!
  questions: [GitCourseQuestionsSubmissionInput!]!
  readings: [GitCourseReadingsSubmissionInput!]!
  status: String!
  summaries: [GitCourseSummariesSubmissionInput!]!
  topicKey: String!
  uuid: String!
}

type GitCourseTopicSubmissionJson {
  courseKey: String!
  explanations: [GitCourseExplanationsSubmission!]
  questions: [GitCourseQuestionsSubmission!]
  readings: [GitCourseReadingsSubmission!]
  status: String!
  summaries: [GitCourseSummariesSubmission!]
  topicKey: String!
  uuid: String!
}

type GnosisSafeWallet {
  chainId: Int!
  id: String!
  order: Int!
  tokenContractAddress: String!
  walletAddress: String!
  walletName: String!
}

input GnosisSafeWalletInput {
  chainId: Int!
  id: String!
  order: Int!
  tokenContractAddress: String!
  walletAddress: String!
  walletName: String!
}

type Guide {
  authors: [String!]!
  categories: [String!]!
  content: String!
  createdAt: DateTimeISO!
  guideIntegrations: GuideIntegrations!
  guideSource: String!
  guideType: String!
  id: String!
  name: String!
  postSubmissionStepContent: String
  previousId: String
  priority: Int
  publishStatus: String!
  steps: [GuideStep!]!
  thumbnail: String
  uuid: String!
  version: Int!
}

type GuideFeedback {
  content: Boolean
  questions: Boolean
  ux: Boolean
}

input GuideFeedbackInput {
  content: Boolean
  questions: Boolean
  ux: Boolean
}

input GuideInput {
  categories: [String!]!
  content: String!
  from: String!
  guideIntegrations: GuideIntegrationsInput!
  guideSource: String!
  guideType: String!
  id: String!
  name: String!
  postSubmissionStepContent: String
  priority: Int
  publishStatus: String!
  socialShareImage: String
  space: String!
  steps: [GuideStepInput!]!
  thumbnail: String
  uuid: String!
}

type GuideIntegrations {
  discordRoleIds: [String!]
  discordRolePassingCount: Int
  discordWebhook: String
  projectGalaxyCredentialId: String
  projectGalaxyOatMintUrl: String
  projectGalaxyOatPassingCount: Int
}

input GuideIntegrationsInput {
  discordRoleIds: [String!]!
  discordRolePassingCount: Int
  discordWebhook: String
  projectGalaxyCredentialId: String
  projectGalaxyOatMintUrl: String
  projectGalaxyOatPassingCount: Int
}

type GuideQuestion {
  answerKeys: [String!]!
  choices: [QuestionChoice!]!
  content: String!
  explanation: String
  order: Int!
  type: String!
  uuid: String!
}

input GuideQuestionInput {
  answerKeys: [String!]
  choices: [QuestionChoiceInput!]
  content: String!
  explanation: String
  order: Int
  questionType: String!
  type: String!
  uuid: String!
}

type GuideRating {
  createdAt: DateTimeISO!
  endRating: Int
  guideUuid: String!
  ipAddress: String
  negativeFeedback: GuideFeedback
  positiveFeedback: GuideFeedback
  ratingUuid: String!
  skipEndRating: Boolean
  skipStartRating: Boolean
  spaceId: String!
  startRating: Int
  updatedAt: DateTimeISO!
  userId: String
  username: String
}

type GuideSettings {
  askForLoginToSubmit: Boolean
  captureBeforeAndAfterRating: Boolean @deprecated(reason: "Use captureRating instead")
  captureRating: Boolean
  showCategoriesInSidebar: Boolean
  showIncorrectAfterEachStep: Boolean
  showIncorrectOnCompletion: Boolean
}

input GuideSettingsInput {
  askForLoginToSubmit: Boolean
  captureRating: Boolean
  showCategoriesInSidebar: Boolean
  showIncorrectAfterEachStep: Boolean
  showIncorrectOnCompletion: Boolean
}

type GuideStep {
  content: String!
  created: Int!
  id: String!
  name: String!
  order: Int!
  stepItems: [GuideStepItem!]!
  uuid: String!
}

input GuideStepInput {
  content: String!
  id: String!
  name: String!
  order: Int!
  stepItems: [StepItemInputGenericInput!]!
  uuid: String!
}

union GuideStepItem = GuideQuestion | GuideUserInput | UserDiscordConnect

type GuideStepItemSubmission {
  selectedAnswerKeys: [String!]
  type: String!
  userDiscordInfo: UserDiscordInfo
  userInput: String
  uuid: String!
}

input GuideStepItemSubmissionInput {
  selectedAnswerKeys: [String!]
  type: String!
  userDiscordInfo: UserDiscordInfoInput
  userInput: String
  uuid: String!
}

type GuideStepSubmission {
  itemResponses: [GuideStepItemSubmission!]!
  uuid: String!
}

input GuideStepSubmissionInput {
  itemResponses: [GuideStepItemSubmissionInput!]!
  uuid: String!
}

type GuideSubmission {
  correctQuestionsCount: Int!
  createdAt: DateTimeISO!
  createdBy: String!
  createdByUsername: String!
  galaxyCredentialsUpdated: Boolean
  guideId: String!
  guideUuid: String!
  id: String!
  result: GuideSubmissionResult!
  spaceId: String!
  steps: [GuideStepSubmission!]
  uuid: String!
}

input GuideSubmissionFiltersInput {
  correctQuestionsCount: Int
  createdAt: DateTimeFilter
  createdByUsername: String
  itemsPerPage: Int!
  page: Int!
}

input GuideSubmissionInput {
  from: String!
  guideUuid: String!
  space: String!
  steps: [GuideStepSubmissionInput!]!
  timestamp: String
  uuid: String!
}

type GuideSubmissionResult {
  allQuestions: [String!]!
  correctQuestions: [String!]!
  wrongQuestions: [String!]!
}

type GuideUserInput {
  label: String!
  order: Int!
  required: Boolean!
  type: String!
  uuid: String!
}

type ImagesResponse {
  created: Int!
  data: [ImagesResponseDataInner!]!
}

type ImagesResponseDataInner {
  b64_json: String
  url: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type JwtResponse {
  jwt: String!
}

input MoveTopicExplanationInput {
  courseKey: String!
  direction: String!
  explanationKey: String!
  topicKey: String!
}

input MoveTopicInput {
  courseKey: String!
  direction: String!
  topicKey: String!
}

input MoveTopicQuestionInput {
  courseKey: String!
  direction: String!
  questionUuid: String!
  topicKey: String!
}

input MoveTopicSummaryInput {
  courseKey: String!
  direction: String!
  summaryKey: String!
  topicKey: String!
}

input MoveTopicVideoInput {
  courseKey: String!
  direction: String!
  topicKey: String!
  videoUuid: String!
}

type Mutation {
  _empty: String
  addDiscordCredentials(code: String!, redirectUri: String!, spaceId: String!): Space!
  addTopic(spaceId: String!, topicInfo: AddTopicInput!): GitCourseTopic!
  addTopicExplanation(explanationInfo: AddTopicExplanationInput!, spaceId: String!): GitCourseExplanation!
  addTopicQuestion(questionInfo: AddTopicQuestionInput!, spaceId: String!): GitCourseQuestion!
  addTopicQuestions(input: AddTopicQuestionsInput!, spaceId: String!): [GitCourseQuestion!]!
  addTopicSummary(spaceId: String!, summaryInfo: AddTopicSummaryInput!): GitCourseSummary!
  addTopicVideo(spaceId: String!, videoInfo: AddTopicVideoInput!): GitCourseReading!
  annotateDiscoursePost(input: AnnotateDiscoursePostInput!, spaceId: String!): DiscoursePost!
  askChatCompletionAI(input: ChatCompletionAIInput!): OpenAIChatCompletionResponse!
  askCompletionAI(input: CompletionAIInput!): OpenAICompletionResponse!
  authenticateWithUnstoppable(idToken: String!): JwtResponse!
  createArticleIndexingInfo(articleUrl: String!, spaceId: String!): ArticleIndexingInfo!
  createByteCollection(input: CreateByteCollectionInput!): ByteCollection!
  createSignedUrl(input: CreateSignedUrlInput!, spaceId: String!): String!
  createSpace(spaceInput: UpsertSpaceInput!): Space!
  createSummaryOfContent(input: String!): OpenAITextResponse!
  createWebsiteScrapingInfo(baseUrl: String!, ignoreHashInUrl: Boolean!, ignoreQueryParams: Boolean!, scrapingStartUrl: String!, spaceId: String!): WebsiteScrapingInfo!
  deleteAndPullCourseRepo(courseKey: String!, spaceId: String!): GitCourse!
  deleteByteCollection(byteCollectionId: String!): Boolean!
  deleteChatbotCategory(id: String!, spaceId: String!): Boolean!
  deleteChatbotFAQ(id: String!, spaceId: String!): Boolean!
  deleteChatbotUserQuestion(id: String!, spaceId: String!): Boolean!
  deleteGitCourseSubmission(courseKey: String!, spaceId: String!): Boolean!
  deleteGuide(spaceId: String!, uuid: String!): Boolean!
  deleteTopic(spaceId: String!, topicInfo: DeleteTopicInput!): GitCourse!
  deleteTopicExplanation(explanationInfo: DeleteTopicExplanationInput!, spaceId: String!): GitCourse!
  deleteTopicQuestion(questionInfo: DeleteTopicQuestionInput!, spaceId: String!): GitCourse!
  deleteTopicSummary(spaceId: String!, summaryInfo: DeleteTopicSummaryInput!): GitCourse!
  deleteTopicVideo(spaceId: String!, videoInfo: DeleteTopicVideoInput!): GitCourse!
  downloadAndCleanContent(input: String!): DownloadAndCleanContentResponse!
  dropPineconeNamespace(spaceId: String!): Boolean!
  editArticleIndexingInfo(articleIndexingInfoId: String!, articleUrl: String!, spaceId: String!): ArticleIndexingInfo!
  editWebsiteScrapingInfo(baseUrl: String!, ignoreHashInUrl: Boolean!, ignoreQueryParams: Boolean!, scrapingStartUrl: String!, spaceId: String!, websiteScrapingInfoId: String!): WebsiteScrapingInfo!
  extractRelevantTextForTopic(input: ExtractRelevantTextForTopicInput!): OpenAITextResponse!
  generateImage(input: GenerateImageInput!): ImagesResponse!
  generateImageEdit(input: GenerateImageEditInput!): GenerateImageResponse!
  generateSharablePdf(byteId: String!, spaceId: String!): String!
  indexDiscoursePost(postId: String!, spaceId: String!): Boolean!
  indexNeedsIndexingDiscoursePosts(spaceId: String!): DiscourseIndexRun!
  initializeGitCourseSubmission(courseKey: String!, spaceId: String!): GitCourseSubmission!
  moveTopic(spaceId: String!, topicInfo: MoveTopicInput!): GitCourse!
  moveTopicExplanation(explanationInfo: MoveTopicExplanationInput!, spaceId: String!): GitCourse!
  moveTopicQuestion(questionInfo: MoveTopicQuestionInput!, spaceId: String!): GitCourse!
  moveTopicSummary(spaceId: String!, summaryInfo: MoveTopicSummaryInput!): GitCourse!
  moveTopicVideo(spaceId: String!, videoInfo: MoveTopicVideoInput!): GitCourse!
  publishByte(input: UpsertByteInput!, spaceId: String!): Byte!
  reFetchDiscordChannels(serverId: String!, spaceId: String!): [DiscordChannel!]!
  reFetchDiscordMessages(channelId: String!, spaceId: String!): Boolean!
  reFetchDiscordServers: [DiscordServer!]!
  refreshGitCourse(courseKey: String!, spaceId: String!): Boolean!
  refreshGitCourses(spaceId: String!): Boolean!
  reloadAcademyRepository(spaceId: String!): Boolean!
  saveByte(input: UpsertByteInput!, spaceId: String!): Byte!
  sendEmail(input: SendEmailInput!): Boolean!
  submitByte(submissionInput: ByteSubmissionInput!): ByteSubmission!
  submitGitCourse(input: CourseSubmissionInput!, spaceId: String!): GitCourseSubmission!
  submitGitCourseTopic(gitCourseTopicSubmission: GitCourseTopicSubmissionInput!, spaceId: String!): GitCourseSubmission!
  submitGuide(submissionInput: GuideSubmissionInput!): GuideSubmission!
  triggerNewDiscourseIndexRun(spaceId: String!): DiscourseIndexRun!
  triggerSiteScrapingRun(spaceId: String!, websiteScrapingInfoId: String!): SiteScrapingRun!
  updateAuthSettings(input: AuthSettingsInput!, spaceId: String!): Space!
  updateByteCollection(input: UpdateByteCollectionInput!): ByteCollection!
  updateByteSettings(input: ByteSettingsInput!, spaceId: String!): Space!
  updateCourseBasicInfo(courseBasicInfo: CourseBasicInfoInput!, spaceId: String!): GitCourse!
  updateGuideSettings(input: GuideSettingsInput!, spaceId: String!): Space!
  updateIndexingOfDiscordChannel(channelId: String!, shouldIndex: Boolean!, spaceId: String!): DiscordChannel!
  updateSocialSettings(input: SocialSettingsInput!, spaceId: String!): Space!
  updateSpace(spaceInput: UpsertSpaceInput!): Space!
  updateTopicBasicInfo(spaceId: String!, topicInfo: UpdateTopicBasicInfoInput!): GitCourse!
  updateTopicExplanation(explanationInfo: UpdateTopicExplanationInput!, spaceId: String!): GitCourse!
  updateTopicQuestion(questionInfo: UpdateTopicQuestionInput!, spaceId: String!): GitCourse!
  updateTopicSummary(spaceId: String!, summaryInfo: UpdateTopicSummaryInput!): GitCourse!
  updateTopicVideo(spaceId: String!, videoInfo: UpdateTopicVideoInput!): GitCourse!
  upsertAcademyTask(spaceId: String!, task: UpsertAcademyTaskInput!): AcademyTask!
  upsertByte(input: UpsertByteInput!, spaceId: String!): Byte!
  upsertByteSocialShare(input: UpsertByteSocialShareInput!, spaceId: String!): ByteSocialShare!
  upsertChatbotCategory(input: UpsertChatbotCategoryInput!, spaceId: String!): ChatbotCategory!
  upsertChatbotFAQ(input: UpsertChatbotFAQInput!, spaceId: String!): ChatbotFAQ!
  upsertChatbotUserQuestion(input: UpsertChatbotUserQuestionInput!, spaceId: String!): ChatbotUserQuestion!
  upsertCourseIntegrations(courseIntegrationInput: UpsertCourseIntegrationsInput!, spaceId: String!): CourseIntegrations!
  upsertGitCourse(gitCourseInput: GitCourseInput!, spaceId: String!): SummarizedGitCourse
  upsertGitCourseTopicSubmission(gitCourseTopicSubmission: GitCourseTopicSubmissionInput!, spaceId: String!): GitCourseSubmission!
  upsertGnosisSafeWallets(spaceId: String!, wallets: [GnosisSafeWalletInput!]!): Space!
  upsertGuide(guideInput: GuideInput!, spaceId: String!): Guide!
  upsertGuideRating(spaceId: String!, upsertGuideRatingInput: UpsertGuideRatingInput!): GuideRating!
  upsertProject(input: UpsertProjectInput!): Project!
  upsertProjectByte(input: UpsertProjectByteInput!, projectId: String!): ProjectByte!
  upsertProjectByteCollection(input: UpsertProjectByteCollectionInput!, projectId: String!): ProjectByteCollection!
  upsertProjectGalaxyAccessToken(accessToken: String!, spaceId: String!): Space!
  upsertSimulation(input: UpsertSimulationInput!, spaceId: String!): Simulation!
  upsertSpaceAcademyRepository(academyRepository: String!, spaceId: String!): Space!
  upsertSpaceFeatures(features: [String!]!, spaceId: String!): Space!
  upsertSpaceInviteLinks(spaceId: String!, spaceInviteArgs: SpaceInviteArgs!): Space!
  upsertSpaceLoaderInfo(input: SpaceLoadersInfoInput!, spaceId: String!): Space!
  upsertSummaryOfDiscoursePost(input: UpsertSummaryOfDiscoursePostInput!, spaceId: String!): DiscoursePost!
  upsertTimeline(input: UpsertTimelineInput!, spaceId: String!): Timeline!
}

type OpenAIChatCompletionChoice {
  finish_reason: String
  index: Int
  message: OpenAIMessage
}

type OpenAIChatCompletionResponse {
  choices: [OpenAIChatCompletionChoice!]!
  created: Int!
  id: ID!
  model: String!
  object: String!
  usage: OpenAIUsage
}

input OpenAIChatMessageInput {
  content: String!
  role: ChatCompletionRequestMessageRoleEnum!
}

type OpenAIChoiceLogprobs {
  text: String
  text_offset: [Int!]
  token_logprobs: [Float!]
  tokens: [String!]
  top_logprobs: [Any!]
}

type OpenAICompletionResponse {
  choices: [CreateCompletionResponseChoice!]!
  created: Int!
  id: ID!
  model: String!
  object: String!
  usage: OpenAIUsage
}

type OpenAIMessage {
  content: String
  role: String!
}

type OpenAITextResponse {
  text: String!
  tokenCount: Int!
}

type OpenAIUsage {
  completion_tokens: Int!
  prompt_tokens: Int!
  total_tokens: Int!
}

enum OrderDirection {
  asc
  desc
}

type Project {
  adminUsernames: [String!]!
  admins: [String!]!
  creator: String!
  details: String!
  discord: String
  docs: String
  github: String
  id: String!
  logo: String
  name: String!
  telegram: String
  type: String!
  website: String
}

type ProjectByte {
  admins: [String!]!
  content: String!
  created: String!
  id: String!
  name: String!
  postSubmissionStepContent: String
  priority: Int!
  publishStatus: String!
  steps: [ByteStep!]!
  tags: [String!]!
}

type ProjectByteCollection {
  byteIds: [String!]!
  bytes: [ByteCollectionByte!]!
  description: String!
  id: String!
  name: String!
  order: Int!
  status: String!
}

type Query {
  _empty: String
  academyTask(uuid: String!): AcademyTask!
  academyTasks(spaceId: String!, status: String): [AcademyTask!]
  articleIndexingInfos(spaceId: String!): [ArticleIndexingInfo!]!
  byte(byteId: String!, includeDraft: Boolean, spaceId: String!): Byte!
  byteCollection(byteCollectionId: String!, spaceId: String!): ByteCollection!
  byteCollections(spaceId: String!): [ByteCollection!]!
  byteSocialShare(byteId: String!, spaceId: String!): ByteSocialShare
  bytes(spaceId: String!): [Byte!]!
  chatbotCategories(spaceId: String!): [ChatbotCategory!]!
  chatbotFAQs(spaceId: String!): [ChatbotFAQ!]!
  chatbotUserQuestions(spaceId: String!): [ChatbotUserQuestion!]!
  consolidatedGuideRating(guideUuid: String!, spaceId: String!): ConsolidatedGuideRating
  courses(spaceId: String!): [GitCourse!]!
  discordChannels(serverId: String!, spaceId: String!): [DiscordChannel!]!
  discordMessages(channelId: String!, spaceId: String!): [DiscordMessage!]!
  discordServer(id: String!, spaceId: String!): DiscordServer!
  discourseIndexRuns(spaceId: String!): [DiscourseIndexRun!]!
  discoursePostComments(postId: String!, spaceId: String!): [DiscoursePostComment!]!
  discoursePosts(spaceId: String!): [DiscoursePost!]!
  gitCourse(courseKey: String!, spaceId: String!): GitCourse!
  gitCourseIntegrations(key: String!, spaceId: String!): CourseIntegrations
  gitCourseSubmission(courseKey: String!, spaceId: String!): GitCourseSubmission
  gitCourseSummarized(key: String!, spaceId: String!): SummarizedGitCourse!
  gitTopicSubmissions(courseKey: String!, spaceId: String!): [GitCourseTopicSubmission!]!
  guide(spaceId: String!, uuid: String!): Guide!
  guideRating(ratingUuid: String!): [GuideRating!]!
  guideRatings(guideUuid: String!, spaceId: String!): [GuideRating!]!
  guideSubmissions(filters: GuideSubmissionFiltersInput!, guideUuid: String!, spaceId: String!): [GuideSubmission!]!
  guides(spaceId: String!): [Guide!]!
  project(id: String!): Project!
  projectByte(projectByteId: String!, projectId: String!): ProjectByte!
  projectByteCollection(byteCollectionId: String!, projectId: String!): ProjectByteCollection!
  projectByteCollections(projectId: String!): [ProjectByteCollection!]!
  projectBytes(projectId: String!): [ProjectByte!]!
  projects(type: String): [Project!]!
  rawGitCourse(key: String!, spaceId: String!): RawGitCourse!
  rawGitCourses(spaceId: String!): [RawGitCourse!]!
  route53Records: [Route53Record!]!
  scrapedUrlInfos(spaceId: String!, websiteScrapingInfoId: String!): [ScrapedUrlInfo!]!
  searchChatbotFAQs(query: String!, spaceId: String!): [SearchedChatbotFAQ!]!
  simulation(simulationId: String!, spaceId: String!): Simulation!
  simulations(spaceId: String!): [Simulation!]!
  siteScrapingRuns(spaceId: String!, websiteScrapingInfoId: String!): [SiteScrapingRun!]!
  space(domain: String, id: String): Space
  spaceDiscordGuild(spaceId: String!): Any
  spaces: [Space!]
  timeline(spaceId: String!, timelineId: String!): Timeline!
  timelines(spaceId: String!): [Timeline!]!
  vercelDomainRecords: [VercelDomain!]!
  websiteScrapingInfos(spaceId: String!): [WebsiteScrapingInfo!]!
}

type QuestionChoice {
  content: String!
  key: String!
}

input QuestionChoiceInput {
  content: String!
  key: String!
}

type RatingDistribution {
  content: Float!
  questions: Float!
  ux: Float!
}

type RawGitCourse {
  courseKey: String!
  courseRepoUrl: String!
  publishStatus: String!
  weight: Int!
}

type Route53Record {
  name: String
  records: [String]
  ttl: Int
  type: String
}

type ScrapedUrlInfo {
  createdAt: DateTimeISO!
  id: String!
  spaceId: String!
  text: String!
  textLength: Int!
  updatedAt: DateTimeISO!
  url: String!
  websiteScrapingInfo: WebsiteScrapingInfo!
  websiteScrapingInfoId: String!
}

type SearchedChatbotFAQ implements ChatbotFAQCommon {
  answer: String!
  categories: [String!]
  id: String!
  priority: Int!
  question: String!
  score: Float!
  spaceId: String!
  subCategories: [String!]
  url: String!
}

input SendEmailInput {
  email: String!
  firstName: String!
  lastName: String!
  message: String!
}

type Simulation {
  admins: [String!]!
  content: String!
  created: String!
  id: String!
  name: String!
  postSubmissionStepContent: String
  priority: Int!
  publishStatus: String!
  showIncorrectOnCompletion: Boolean!
  steps: [SimulationStep!]!
  tags: [String!]!
}

type SimulationStep {
  content: String!
  iframeUrl: String
  name: String!
  order: Int!
  uuid: String!
}

input SimulationStepInput {
  content: String!
  iframeUrl: String
  name: String!
  order: Int!
  uuid: String!
}

type SiteScrapingRun {
  createdAt: DateTimeISO!
  id: String!
  scrapingRunDate: DateTimeISO!
  scrapingStartUrl: String!
  spaceId: String!
  status: String!
  updatedAt: DateTimeISO!
  websiteScrapingInfo: WebsiteScrapingInfo!
  websiteScrapingInfoId: String!
}

type SocialSettings {
  linkedSharePdfBackgroundImage: String
}

input SocialSettingsInput {
  linkedSharePdfBackgroundImage: String
}

type Space {
  adminUsernames: [String!]!
  admins: [String!]!
  authSettings: AuthSettings!
  avatar: String
  botDomains: [String!]
  byteSettings: ByteSettings!
  creator: String!
  domains: [String!]!
  features: [String!]!
  guideSettings: GuideSettings!
  id: String!
  inviteLinks: SpaceInviteLinks
  name: String!
  skin: String!
  socialSettings: SocialSettings!
  spaceIntegrations: SpaceIntegrations
}

type SpaceFilters {
  minScore: Float
  onlyMembers: Boolean
}

type SpaceGitRepository {
  authenticationToken: String
  gitRepoType: String
  repoUrl: String!
}

input SpaceGitRepositoryInput {
  authenticationToken: String
  gitRepoType: String
  repoUrl: String!
}

type SpaceIntegrations {
  academyRepository: String
  discordGuildId: String
  gitGuideRepositories: [SpaceGitRepository!]
  gnosisSafeWallets: [GnosisSafeWallet!]
  loadersInfo: SpaceLoadersInfo
  projectGalaxyTokenLastFour: String
}

input SpaceIntegrationsInput {
  academyRepository: String
  discordGuildId: String
  gitGuideRepositories: [SpaceGitRepositoryInput!]!
  gnosisSafeWallets: [GnosisSafeWalletInput!]!
  projectGalaxyTokenLastFour: String
}

input SpaceInviteArgs {
  discordInviteLink: String
  showAnimatedButtonForDiscord: Boolean
  showAnimatedButtonForTelegram: Boolean
  telegramInviteLink: String
}

type SpaceInviteLinks {
  discordInviteLink: String
  showAnimatedButtonForDiscord: Boolean
  showAnimatedButtonForTelegram: Boolean
  telegramInviteLink: String
}

input SpaceInviteLinksInput {
  discordInviteLink: String
  showAnimatedButtonForDiscord: Boolean
  showAnimatedButtonForTelegram: Boolean
  telegramInviteLink: String
}

type SpaceLoadersInfo {
  discordServerId: String
  discourseUrl: String
}

input SpaceLoadersInfoInput {
  discordServerId: String
  discourseUrl: String
}

input SpaceWhere {
  id: String
  id_in: [String]
}

input StepItemInputGenericInput {
  answerKeys: [String!]
  choices: [QuestionChoiceInput!]
  content: String
  explanation: String
  label: String
  questionType: String
  required: Boolean
  type: String!
  uuid: String!
}

type SummarizedGitCourse {
  courseAdmins: [String!]
  details: String!
  duration: String!
  highlights: [String!]!
  key: String!
  priority: Int
  publishStatus: String!
  summary: String!
  thumbnail: String!
  title: String!
  topics: [SummarizedGitCourseTopic!]!
  uuid: String!
}

type SummarizedGitCourseTopic {
  details: String!
  key: String!
  title: String!
}

type Timeline {
  admins: [String!]!
  content: String!
  created: String!
  events: [TimelineEvent!]!
  excerpt: String!
  id: String!
  name: String!
  priority: Int!
  publishStatus: String!
  tags: [String!]!
  thumbnail: String
}

type TimelineEvent {
  date: DateTimeISO!
  fullDetails: String
  moreLink: String
  order: Int!
  summary: String!
  title: String!
  uuid: String!
}

type TopicConfig {
  showExplanations: Boolean!
  showHints: Boolean!
}

input TopicConfigInput {
  showExplanations: Boolean!
  showHints: Boolean!
}

input TopicQuestionChoiceInput {
  content: String!
  key: String!
}

input UpdateByteCollectionInput {
  byteCollectionId: String!
  byteIds: [String!]!
  description: String!
  name: String!
  order: Int!
  spaceId: String!
  status: String!
}

input UpdateTopicBasicInfoInput {
  courseKey: String!
  details: String!
  title: String!
  topicKey: String!
}

input UpdateTopicExplanationInput {
  courseKey: String!
  details: String!
  explanationKey: String!
  shortTitle: String!
  title: String!
  topicKey: String!
}

input UpdateTopicQuestionInput {
  answerKeys: [String!]!
  choices: [TopicQuestionChoiceInput!]!
  content: String!
  courseKey: String!
  explanation: String!
  hint: String!
  questionType: String!
  questionUuid: String!
  topicKey: String!
}

input UpdateTopicSummaryInput {
  courseKey: String!
  details: String!
  shortTitle: String!
  summaryKey: String!
  title: String!
  topicKey: String!
}

input UpdateTopicVideoInput {
  courseKey: String!
  details: String!
  shortTitle: String!
  title: String!
  topicKey: String!
  url: String!
  videoUuid: String!
}

input UpsertAcademyTaskInput {
  details: String!
  excerpt: String!
  items: [StepItemInputGenericInput!]!
  prerequisiteCourseUuids: [String!]!
  prerequisiteGuideUuids: [String!]!
  status: String!
  title: String!
  uuid: String!
}

input UpsertByteInput {
  admins: [String!]!
  content: String!
  created: String!
  id: String!
  name: String!
  priority: Int!
  publishStatus: String!
  steps: [ByteStepInput!]!
  tags: [String!]!
  thumbnail: String
  visibility: String
}

input UpsertByteSocialShareInput {
  byteId: String!
  linkedInImages: [String!]
  linkedInPdf: String
  linkedinPdfContent: ByteLinkedinPdfContentInput
  spaceId: String!
  twitterImage: String
}

input UpsertChatbotCategoryInput {
  description: String!
  id: String!
  key: String!
  name: String!
  priority: Int!
  subCategories: [UpsertChatbotSubcategoryInput!]!
}

input UpsertChatbotFAQInput {
  answer: String!
  categories: [String!]
  id: String!
  priority: Int!
  question: String!
  spaceId: String!
  subCategories: [String!]
  url: String!
}

input UpsertChatbotSubcategoryInput {
  description: String!
  key: String!
  name: String!
}

input UpsertChatbotUserQuestionInput {
  categories: [String!]
  id: String!
  question: String!
  spaceId: String!
  subCategories: [String!]
}

input UpsertCourseIntegrationsInput {
  courseKey: String!
  discordRoleIds: [String!]!
  discordRolePassingCount: Int
  discordWebhook: String
  projectGalaxyCredentialId: String
  projectGalaxyOatMintUrl: String
  projectGalaxyOatMintedContent: String
  projectGalaxyOatPassingCount: Int
}

input UpsertGuideRatingInput {
  endRating: Int
  guideUuid: String!
  negativeFeedback: GuideFeedbackInput
  positiveFeedback: GuideFeedbackInput
  ratingUuid: String!
  skipEndRating: Boolean
  skipStartRating: Boolean
  spaceId: String!
  startRating: Int
  userId: String
}

input UpsertProjectByteCollectionInput {
  byteIds: [String!]!
  description: String!
  id: String!
  name: String!
  order: Int!
  projectId: String!
  status: String!
}

input UpsertProjectByteInput {
  admins: [String!]!
  content: String!
  created: String!
  id: String!
  name: String!
  priority: Int!
  publishStatus: String!
  steps: [ByteStepInput!]!
  tags: [String!]!
  thumbnail: String
}

input UpsertProjectInput {
  adminUsernames: [String!]!
  admins: [String!]!
  details: String!
  discord: String
  docs: String
  github: String
  id: String!
  logo: String
  name: String!
  telegram: String
  type: String!
  website: String
}

input UpsertSimulationInput {
  admins: [String!]!
  content: String!
  created: String!
  id: String
  name: String!
  priority: Int!
  publishStatus: String!
  steps: [SimulationStepInput!]!
  tags: [String!]!
  thumbnail: String
}

input UpsertSpaceInput {
  adminUsernames: [String!]!
  admins: [String!]!
  avatar: String!
  botDomains: [String!]
  creator: String!
  domains: [String!]!
  features: [String!]!
  id: String!
  inviteLinks: SpaceInviteLinksInput!
  name: String!
  skin: String!
  spaceIntegrations: SpaceIntegrationsInput!
}

input UpsertSummaryOfDiscoursePostInput {
  aiSummary: String
  aiSummaryDate: DateTimeISO
  postId: String!
}

input UpsertTimelineEventInput {
  date: DateTimeISO!
  fullDetails: String
  moreLink: String
  summary: String!
  title: String!
  uuid: String!
}

input UpsertTimelineInput {
  admins: [String!]!
  content: String!
  created: String!
  events: [UpsertTimelineEventInput!]!
  excerpt: String!
  id: String
  name: String!
  priority: Int!
  publishStatus: String!
  tags: [String!]!
  thumbnail: String
}

type UserDiscordConnect {
  type: String!
  uuid: String!
}

type UserDiscordInfo {
  accessToken: String!
  avatar: String!
  discriminator: String!
  email: String!
  id: String!
  username: String!
}

input UserDiscordInfoInput {
  accessToken: String!
  avatar: String!
  discriminator: String!
  email: String!
  id: String!
  username: String!
}

input UserInputInput {
  label: String!
  order: Int
  required: Boolean
  type: String!
  uuid: String!
}

type VercelDomain {
  apexName: String!
  createdAt: Int
  gitBranch: String
  name: String!
  projectId: String!
  redirect: String
  updatedAt: Int
  verified: Boolean!
}

type WebsiteScrapingInfo {
  baseUrl: String!
  createdAt: DateTimeISO!
  id: String!
  ignoreHashInUrl: Boolean!
  ignoreQueryParams: Boolean!
  scrapedUrlInfos: [ScrapedUrlInfo!]!
  scrapingRuns: [SiteScrapingRun!]!
  scrapingStartUrl: String!
  spaceId: String!
  updatedAt: DateTimeISO!
}