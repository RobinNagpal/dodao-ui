fragment SpaceWithIntegrations on Space {
  id
  creator
  features
  name
  skin
  avatar
  inviteLinks {
    discordInviteLink
    showAnimatedButtonForDiscord
    telegramInviteLink
    showAnimatedButtonForTelegram
  }
  admins
  spaceIntegrations {
    academyRepository
    discordGuildId
    gitGuideRepositories {
      authenticationToken
      gitRepoType
      repoUrl
    }
    gnosisSafeWallets {
      id
      chainId
      order
      tokenContractAddress
      walletAddress
      walletName
    }
    projectGalaxyTokenLastFour
  }
}

query ExtendedSpace($spaceId: String!) {
  space(id: $spaceId) {
    ...SpaceWithIntegrations
  }
}

query ExtendedSpaceByDomain($domain: String!) {
  space(domain: $domain) {
    ...SpaceWithIntegrations
  }
}

query SpaceDiscordGuild($spaceId: String!) {
  payload: spaceDiscordGuild(spaceId: $spaceId)
}

mutation UpsertSpaceFeatures($spaceId: String!, $features: [String!]!) {
  payload: upsertSpaceFeatures(spaceId: $spaceId, features: $features) {
    ...SpaceWithIntegrations
  }
}


mutation UpsertSpaceInviteLinks($spaceId: String!, $spaceInviteArgs: SpaceInviteArgs!) {
  payload: upsertSpaceInviteLinks(spaceId: $spaceId, spaceInviteArgs: $spaceInviteArgs) {
    id
  }
}

mutation UpsertProjectGalaxyAccessToken(
  $spaceId: String!
  $accessToken: String!
) {
  payload: upsertProjectGalaxyAccessToken(
    spaceId: $spaceId
    accessToken: $accessToken
  ) {
    id
  }
}

mutation CreateSignedUrl($spaceId: String!, $input: CreateSignedUrlInput!) {
  payload: createSignedUrl(spaceId: $spaceId, input: $input)
}




mutation AddDiscordCredentials(
  $spaceId: String!
  $code: String!
  $redirectUri: String!
) {
  payload: addDiscordCredentials(
    spaceId: $spaceId
    code: $code
    redirectUri: $redirectUri
  ) {
    id
  }
}


mutation UpsertSpaceGitGuideRepositories($spaceId: String!, $gitGuideRepositories: [SpaceGitRepositoryInput!]!) {
  payload: upsertSpaceGitGuideRepositories(spaceId: $spaceId, gitGuideRepositories: $gitGuideRepositories) {
    id
  }
}

mutation UpsertSpaceAcademyRepository($spaceId: String!, $academyRepository: String!) {
  upsertSpaceAcademyRepository(spaceId: $spaceId, academyRepository: $academyRepository) {
    id
  }
}

mutation UpdateSpace($spaceInput: UpsertSpaceInput!){
  updateSpace(spaceInput: $spaceInput) {
    ...SpaceWithIntegrations
  }
}

mutation CreateSpace($spaceInput: UpsertSpaceInput!){
  createSpace(spaceInput: $spaceInput) {
    ...SpaceWithIntegrations
  }
}
