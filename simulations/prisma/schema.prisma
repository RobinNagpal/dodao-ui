generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BusinessSubject {
  HR
  ECONOMICS
  MARKETING
  FINANCE
  OPERATIONS
}

enum UserRole {
  Student
  Admin
  Instructor
}

model CryptoLoginNonce {
  userId  String   @unique @map("user_id")
  nonce   String
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("crypto_login_nonce")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  publicAddress String?   @map("public_address")
  phoneNumber   String?   @map("phone_number")
  walletAddress String[]  @default([]) @map("wallet_address")
  isTestUser    Boolean   @default(false) @map("is_test_user")
  spaceId       String    @map("space_id")
  username      String    @map("username")
  authProvider  String    @map("auth_provider")
  role          UserRole  @default(Student) @map("role")

  accounts         Account[]
  sessions         Session[]
  cryptoLoginNonce CryptoLoginNonce?

  // Back-relations (existing)
  createdCaseStudies CaseStudy[] @relation("CaseStudyCreatedBy")
  updatedCaseStudies CaseStudy[] @relation("CaseStudyUpdatedBy")

  // Back-relations (previous step)
  createdModules                CaseStudyModule[]          @relation("CaseStudyModuleCreatedBy")
  updatedModules                CaseStudyModule[]          @relation("CaseStudyModuleUpdatedBy")
  createdEnrollments            ClassCaseStudyEnrollment[] @relation("EnrollmentCreatedBy")
  updatedEnrollments            ClassCaseStudyEnrollment[] @relation("EnrollmentUpdatedBy")
  assignedInstructorEnrollments ClassCaseStudyEnrollment[] @relation("EnrollmentAssignedInstructor")
  createdExercises              ModuleExercise[]           @relation("ModuleExerciseCreatedBy")
  updatedExercises              ModuleExercise[]           @relation("ModuleExerciseUpdatedBy")

  // Back-relations (new in this step)
  createdEnrollmentStudents  EnrollmentStudent[] @relation("EnrollmentStudentCreatedBy")
  updatedEnrollmentStudents  EnrollmentStudent[] @relation("EnrollmentStudentUpdatedBy")
  assignedEnrollmentStudents EnrollmentStudent[] @relation("EnrollmentStudentAssignedStudent")

  createdExerciseAttempts ExerciseAttempt[] @relation("ExerciseAttemptCreatedBy")
  updatedExerciseAttempts ExerciseAttempt[] @relation("ExerciseAttemptUpdatedBy")

  createdFinalSummaries FinalSummary[] @relation("FinalSummaryCreatedBy")
  updatedFinalSummaries FinalSummary[] @relation("FinalSummaryUpdatedBy")

  createdFinalSubmissions FinalSubmission[] @relation("FinalSubmissionCreatedBy")
  updatedFinalSubmissions FinalSubmission[] @relation("FinalSubmissionUpdatedBy")

  @@unique([publicAddress, spaceId])
  @@unique([username, spaceId])
  @@unique([email, spaceId])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model CaseStudy {
  id                             String                     @id @default(uuid())
  title                          String                     @map("title")
  shortDescription               String                     @map("short_description")
  details                        String                     @map("details") @db.Text
  subject                        BusinessSubject            @map("subject")
  createdAt                      DateTime                   @default(now()) @map("created_at")
  updatedAt                      DateTime                   @updatedAt @map("updated_at")
  archive                        Boolean                    @default(false) @map("archive")
  finalSummaryPromptInstructions String?                    @map("final_summary_prompt_instructions")
  editors                        String[]                   @default([]) @map("editors")
  modules                        CaseStudyModule[]          @relation("CaseStudyToModules")
  enrollments                    ClassCaseStudyEnrollment[] @relation("CaseStudyToEnrollments")

  // FK scalars (preserve existing column names)
  createdById String @map("created_by")
  updatedById String @map("updated_by")

  // Relations
  createdBy User @relation("CaseStudyCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy User @relation("CaseStudyUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@map("case_studies")
}

model CaseStudyModule {
  id          String    @id @default(uuid())
  caseStudyId String    @map("case_study_id")
  caseStudy   CaseStudy @relation("CaseStudyToModules", fields: [caseStudyId], references: [id])

  title            String @map("title")
  shortDescription String @map("short_description")
  details          String @map("details") @db.Text
  orderNumber      Int    @map("order_number")

  // Mandatory FK fields to User
  createdById String @map("created_by")
  updatedById String @map("updated_by")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  archive   Boolean  @default(false) @map("archive")

  // Relations to User (restrict delete because FKs are required)
  createdBy User @relation("CaseStudyModuleCreatedBy", fields: [createdById], references: [id], onDelete: Restrict)
  updatedBy User @relation("CaseStudyModuleUpdatedBy", fields: [updatedById], references: [id], onDelete: Restrict)

  exercises ModuleExercise[] @relation("ModuleToExercises")

  @@map("case_study_modules")
}

model ClassCaseStudyEnrollment {
  id          String    @id @default(uuid())
  caseStudyId String    @map("case_study_id")
  caseStudy   CaseStudy @relation("CaseStudyToEnrollments", fields: [caseStudyId], references: [id])

  // Mandatory FK to assigned instructor (User)
  assignedInstructorId String @map("assigned_instructor_id")
  assignedInstructor   User   @relation("EnrollmentAssignedInstructor", fields: [assignedInstructorId], references: [id], onDelete: Restrict)

  // Mandatory FKs to creator/updater (User)
  createdById String @map("created_by")
  updatedById String @map("updated_by")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  archive   Boolean  @default(false) @map("archive")

  // Relations to User (restrict delete because FKs are required)
  createdBy User @relation("EnrollmentCreatedBy", fields: [createdById], references: [id], onDelete: Restrict)
  updatedBy User @relation("EnrollmentUpdatedBy", fields: [updatedById], references: [id], onDelete: Restrict)

  students EnrollmentStudent[]

  @@map("case_study_enrollments")
}

model EnrollmentStudent {
  id           String                   @id @default(uuid())
  enrollmentId String                   @map("enrollment_id")
  enrollment   ClassCaseStudyEnrollment @relation(fields: [enrollmentId], references: [id])

  // Mandatory FK to assigned student (User)
  assignedStudentId String @map("assigned_student_id")
  assignedStudent   User   @relation("EnrollmentStudentAssignedStudent", fields: [assignedStudentId], references: [id], onDelete: Restrict)

  instructionReadStatus Json? @map("instruction_read_status")

  // Mandatory FKs to creator/updater (User)
  createdById String @map("created_by")
  updatedById String @map("updated_by")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  archive   Boolean  @default(false) @map("archive")

  finalScore Int? @map("final_score")

  // Relations to User (restrict delete because FKs are required)
  createdBy User @relation("EnrollmentStudentCreatedBy", fields: [createdById], references: [id], onDelete: Restrict)
  updatedBy User @relation("EnrollmentStudentUpdatedBy", fields: [updatedById], references: [id], onDelete: Restrict)

  finalSubmission FinalSubmission?
  finalSummary    FinalSummary?

  @@unique([enrollmentId, assignedStudentId], map: "uq_enrollment_student")
  @@map("enrollment_students")
}

model ModuleExercise {
  id       String          @id @default(uuid()) @map("id")
  moduleId String          @map("module_id")
  module   CaseStudyModule @relation("ModuleToExercises", fields: [moduleId], references: [id])

  title                  String  @map("title")
  shortDescription       String  @map("short_description")
  details                String  @map("details") @db.Text
  promptHint             String? @map("prompt_hint")
  instructorInstructions String? @map("instructor_instructions")
  gradingLogic           String? @map("grading_logic")
  orderNumber            Int     @map("order_number")

  // Mandatory FKs to creator/updater (User)
  createdById String @map("created_by")
  updatedById String @map("updated_by")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  archive   Boolean  @default(false) @map("archive")

  // Relations to User (restrict delete because FKs are required)
  createdBy User @relation("ModuleExerciseCreatedBy", fields: [createdById], references: [id], onDelete: Restrict)
  updatedBy User @relation("ModuleExerciseUpdatedBy", fields: [updatedById], references: [id], onDelete: Restrict)

  attempts ExerciseAttempt[] @relation("ExerciseToAttempts")

  @@map("module_exercises")
}

model ExerciseAttempt {
  id         String         @id @default(uuid()) @map("id")
  exerciseId String         @map("exercise_id")
  exercise   ModuleExercise @relation("ExerciseToAttempts", fields: [exerciseId], references: [id])

  // Mandatory FKs to creator/updater (User)
  createdById String @map("created_by") // created by student
  updatedById String @map("updated_by") // updated by student

  attemptNumber      Int      @map("attempt_number")
  model              String?  @map("model")
  prompt             String?  @map("prompt") @db.Text
  promptResponse     String?  @map("prompt_response") @db.Text
  status             String?  @map("status")
  error              String?  @map("error")
  selectedForSummary Boolean  @default(false) @map("selected_for_summary")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at")
  archive            Boolean  @default(false) @map("archive")

  evaluatedScore  Int?     @map("evaluated_score")
  evaluationLogic String?  @map("evaluation_logic")

  // Relations to User (restrict delete because FKs are required)
  createdBy User @relation("ExerciseAttemptCreatedBy", fields: [createdById], references: [id], onDelete: Restrict)
  updatedBy User @relation("ExerciseAttemptUpdatedBy", fields: [updatedById], references: [id], onDelete: Restrict)

  @@map("exercise_attempts")
}

model FinalSummary {
  id String @id @default(uuid()) @map("id")

  studentId String            @unique @map("student_id")
  student   EnrollmentStudent @relation(fields: [studentId], references: [id])

  model    String? @map("model")
  response String? @map("response") @db.Text
  status   String? @map("status")
  error    String? @map("error")

  // Mandatory FKs to creator/updater (User)
  createdById String @map("created_by") // created by student
  updatedById String @map("updated_by") // updated by student

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  archive   Boolean  @default(false) @map("archive")

  // Relations to User (restrict delete because FKs are required)
  createdBy User @relation("FinalSummaryCreatedBy", fields: [createdById], references: [id], onDelete: Restrict)
  updatedBy User @relation("FinalSummaryUpdatedBy", fields: [updatedById], references: [id], onDelete: Restrict)

  @@map("final_summaries")
}

model FinalSubmission {
  id String @id @default(uuid()) @map("id")

  studentId String            @unique @map("student_id")
  student   EnrollmentStudent @relation(fields: [studentId], references: [id])

  // Mandatory FKs to creator/updater (User)
  createdById String @map("created_by") // created by student
  updatedById String @map("updated_by") // updated by student

  finalContent String?  @map("final_content") @db.Text
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  archive      Boolean  @default(false) @map("archive")

  // Relations to User (restrict delete because FKs are required)
  createdBy User @relation("FinalSubmissionCreatedBy", fields: [createdById], references: [id], onDelete: Restrict)
  updatedBy User @relation("FinalSubmissionUpdatedBy", fields: [updatedById], references: [id], onDelete: Restrict)

  @@map("final_submissions")
}
