'use client';

import { NewsArticle, ArticleSource } from '@/lib/news-reader-types';
import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { Progress } from '@/components/ui/progress';
import { Clock, ExternalLink, Bookmark, BookmarkCheck, ChevronDown, Link } from 'lucide-react';

interface EnhancedArticleCardProps {
  article: NewsArticle;
  isBookmarked: boolean;
  onToggleBookmark: (articleId: number) => void;
  folderPath: string[] | null;
}

export default function EnhancedArticleCard({ article, isBookmarked, onToggleBookmark, folderPath }: EnhancedArticleCardProps) {
  const [isExpanded, setIsExpanded] = useState<boolean>(false);

  const formatDate = (dateString: string): string => {
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  return (
    <Card className="hover:shadow-md transition-shadow">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between gap-4">
          <div className="flex-1">
            <CardTitle className="text-lg leading-tight mb-2">{article.title}</CardTitle>
            <CardDescription className="text-sm">{article.description}</CardDescription>
          </div>
          <div className="flex items-center gap-2">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => onToggleBookmark(article.id)}
              className={isBookmarked ? 'text-yellow-600 hover:text-yellow-700' : ''}
            >
              {isBookmarked ? <BookmarkCheck className="h-4 w-4" /> : <Bookmark className="h-4 w-4" />}
            </Button>
            <Button variant="ghost" size="sm" asChild>
              <a href={article.url} target="_blank" rel="noopener noreferrer">
                <ExternalLink className="h-4 w-4" />
              </a>
            </Button>
          </div>
        </div>
      </CardHeader>

      <CardContent className="pt-0 space-y-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Badge variant="outline">{article.keyword}</Badge>
            {folderPath && folderPath.length > 0 && (
              <Badge variant="secondary" className="text-xs">
                {folderPath.join(' / ')}
              </Badge>
            )}
            <div className="flex gap-1">
              {article.filters.map((filter) => (
                <Badge key={filter} variant="secondary" className="text-xs">
                  {filter}
                </Badge>
              ))}
            </div>
          </div>
          <div className="flex items-center gap-2 text-sm text-muted-foreground">
            <Clock className="h-4 w-4" />
            {formatDate(article.publishedAt)}
            <span>•</span>
            <span>{article.source}</span>
          </div>
        </div>

        <Accordion type="single" collapsible className="w-full">
          <AccordionItem value="full-article" className="border-none">
            <AccordionTrigger className="hover:no-underline py-2">
              <div className="flex items-center gap-2">
                <span className="text-sm font-medium">Read Full Article</span>
                <Badge variant="outline" className="text-xs">
                  {article.sources?.length || 0} sources
                </Badge>
              </div>
            </AccordionTrigger>
            <AccordionContent className="pt-4">
              <div className="space-y-6">
                {/* Full Article Content */}
                <div className="prose prose-sm max-w-none">
                  <div className="bg-muted/30 p-4 rounded-lg">
                    {article.fullContent ||
                      'This is the full article content generated by combining information from multiple sources. The article provides comprehensive coverage of the topic by analyzing and synthesizing information from various reliable news sources.'}
                  </div>
                </div>

                {/* Source Articles */}
                <div className="space-y-4">
                  <h4 className="font-semibold text-sm flex items-center gap-2">
                    <Link className="h-4 w-4" />
                    Source Articles
                  </h4>

                  <div className="grid gap-4">
                    {(
                      article.sources || [
                        {
                          title: 'Tesla Q4 Earnings Beat Expectations',
                          url: 'https://techcrunch.com/tesla-earnings',
                          source: 'TechCrunch',
                          percentage: 45,
                          publishedAt: '2024-01-20T09:00:00Z',
                        },
                        {
                          title: 'Tesla Stock Surges After Strong Quarter',
                          url: 'https://reuters.com/tesla-stock',
                          source: 'Reuters',
                          percentage: 35,
                          publishedAt: '2024-01-20T10:15:00Z',
                        },
                        {
                          title: 'Electric Vehicle Market Analysis',
                          url: 'https://bloomberg.com/ev-market',
                          source: 'Bloomberg',
                          percentage: 20,
                          publishedAt: '2024-01-20T11:30:00Z',
                        },
                      ]
                    ).map((source, index) => (
                      <Card key={index} className="p-4">
                        <div className="flex items-start justify-between gap-4">
                          <div className="flex-1">
                            <h5 className="font-medium text-sm mb-1">{source.title}</h5>
                            <div className="flex items-center gap-2 text-xs text-muted-foreground mb-2">
                              <span>{source.source}</span>
                              <span>•</span>
                              <span>{formatDate(source.publishedAt)}</span>
                            </div>
                            <div className="flex items-center gap-3">
                              <div className="flex-1">
                                <div className="flex items-center justify-between text-xs mb-1">
                                  <span>Content Usage</span>
                                  <span className="font-medium">{source.percentage}%</span>
                                </div>
                                <Progress value={source.percentage} className="h-2" />
                              </div>
                            </div>
                          </div>
                          <Button variant="ghost" size="sm" asChild>
                            <a href={source.url} target="_blank" rel="noopener noreferrer">
                              <ExternalLink className="h-3 w-3" />
                            </a>
                          </Button>
                        </div>
                      </Card>
                    ))}
                  </div>
                </div>
              </div>
            </AccordionContent>
          </AccordionItem>
        </Accordion>
      </CardContent>
    </Card>
  );
}
